<!DOCTYPE html>
<!--[if IE]><![endif]-->
<html>
    
    <head>
      <meta charset="utf-8">
      <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
      <title>Bot as Hosted Service | DisCatSharp Docs </title>
      <meta name="viewport" content="width=device-width">
      <meta name="title" content="Bot as Hosted Service | DisCatSharp Docs ">
      <meta name="generator" content="docfx 2.60.1.0">
      
    <link rel="apple-touch-icon" sizes="57x57" href="../../apple-icon-57x57.png">
    <link rel="apple-touch-icon" sizes="60x60" href="../../apple-icon-60x60.png">
    <link rel="apple-touch-icon" sizes="72x72" href="../../apple-icon-72x72.png">
    <link rel="apple-touch-icon" sizes="76x76" href="../../apple-icon-76x76.png">
    <link rel="apple-touch-icon" sizes="114x114" href="../../apple-icon-114x114.png">
    <link rel="apple-touch-icon" sizes="120x120" href="../../apple-icon-120x120.png">
    <link rel="apple-touch-icon" sizes="144x144" href="../../apple-icon-144x144.png">
    <link rel="apple-touch-icon" sizes="152x152" href="../../apple-icon-152x152.png">
    <link rel="apple-touch-icon" sizes="180x180" href="../../apple-icon-180x180.png">
    <link rel="icon" type="image/png" sizes="192x192" href="../../android-icon-192x192.png">
    <link rel="icon" type="image/png" sizes="32x32" href="../../favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="96x96" href="../../favicon-96x96.png">
    <link rel="icon" type="image/png" sizes="16x16" href="../../favicon-16x16.png">
    <link rel="manifest" href="/manifest.json">
    <meta name="msapplication-TileColor" content="#ffffff">
    <meta name="msapplication-TileImage" content="../../ms-icon-144x144.png">
    <meta name="theme-color" content="#ffffff">
      <link rel="shortcut icon" href="../../favicon.ico">
      <script defer="" src='https://static.cloudflareinsights.com/beacon.min.js' data-cf-beacon='{"token": "de6c22ce0b3e4c17bb78c8c31b4e695b"}'></script>
      <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap" rel="stylesheet">
      <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/10.1.1/styles/night-owl.min.css">
      <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.7.2/font/bootstrap-icons.css" integrity="sha384-EvBWSlnoFgZlXJvpzS+MAUEjvN7+gcCwH+qh7GRFOGgZO0PuwOFro7qPOJnLfe7l" crossorigin="anonymous">
      <link rel="stylesheet" href="../../src/styles/config.css">
      <link rel="stylesheet" href="../../src/styles/discord.css">
      <link rel="stylesheet" href="../../src/styles/dcs.css">
      <link rel="stylesheet" href="../../src/styles/main.css">
      <link rel="stylesheet" href="../../src/styles/colors.css">
      <link rel="stylesheet" href="../../src/styles/highlight/github-dark.min.css">
      <meta property="docfx:navrel" content="../../toc.html">
      <meta property="docfx:tocrel" content="../toc.html">
      
      <meta property="docfx:rel" content="../../">
      <meta property="docfx:newtab" content="true">
    </head>

    <body>
        <div class="top-navbar">
            <a class="burger-icon" onclick="toggleMenu()">
                <svg name="Hamburger" style="vertical-align: middle;" width="34" height="34" viewbox="0 0 24 24"><path fill="currentColor" fill-rule="evenodd" clip-rule="evenodd" d="M20 6H4V9H20V6ZM4 10.999H20V13.999H4V10.999ZM4 15.999H20V18.999H4V15.999Z"></path></svg>
            </a>

            
            <a class="navbar-brand" href="../../index.html">
              <img id="logo" class="svg" src="../../logo.png" alt="DisCatSharp">
            </a>
        </div>

        <div class="body-content">
            <div id="blackout" class="blackout" onclick="toggleMenu()"></div>

            <nav id="sidebar" role="navigation">
                <div class="sidebar">
                    
                    <div>
                      <div class="mobile-hide">
                        
                        <a class="navbar-brand" href="../../index.html">
                          <img id="logo" class="svg" src="../../logo.png" alt="DisCatSharp">
                        </a>
                      </div>

                      <div class="sidesearch">
                        <form id="search" role="search" class="search">
                            <i class="bi bi-search search-icon"></i>
                            <input type="text" id="search-query" placeholder="Search" autocomplete="off">
                        </form>
                      </div>
                    
                      <div id="navbar">
                      </div>
                    </div>
                    <div class="sidebar-item-separator"></div>
                        
                        <div id="sidetoggle">
                          <div id="sidetoc"></div>
                        </div>
                </div>
                <div class="footer">
                  <strong>Made with ♥ by AITSYS</strong>
                  
                </div>
            </nav>

            <main class="main-panel">
                
                <div id="search-results" style="display: none;">
                  <h1 class="search-list">Search Results for <span></span></h1>
                  <div class="sr-items">
                    <p class="lsearch"><i class="bi bi-hourglass-split index-loading"></i></p>
                  </div>
                  <ul id="pagination" data-first="First" data-prev="Previous" data-next="Next" data-last="Last"></ul>
                </div>

                <div role="main" class="hide-when-search">
                        
                        <div class="subnav navbar navbar-default">
                          <div class="container hide-when-search" id="breadcrumb">
                            <ul class="breadcrumb">
                              <li></li>
                            </ul>
                          </div>
                        </div>
						
						<div id="sidetoggle">
						  <div id="sidetoc"></div>
						</div>
						<div class="article row grid-right">

                    <article class="content wrap" id="_content" data-uid="basics_web_app">
<h1 id="prerequisites" sourcefile="articles/basics/web_app.md" sourcestartlinenumber="6" sourceendlinenumber="6">Prerequisites</h1>

<p sourcefile="articles/basics/web_app.md" sourcestartlinenumber="7" sourceendlinenumber="7">Install the following packages:</p>
<ul sourcefile="articles/basics/web_app.md" sourcestartlinenumber="8" sourceendlinenumber="9">
<li sourcefile="articles/basics/web_app.md" sourcestartlinenumber="8" sourceendlinenumber="8">DisCatSharp</li>
<li sourcefile="articles/basics/web_app.md" sourcestartlinenumber="9" sourceendlinenumber="9">DisCatSharp.Hosting</li>
</ul>
<div class="IMPORTANT" sourcefile="articles/basics/web_app.md" sourcestartlinenumber="11" sourceendlinenumber="11"><h5>Important</h5><p sourcefile="articles/basics/web_app.md" sourcestartlinenumber="12" sourceendlinenumber="13">Please be aware that this approach relies on Dependency Injection. You can either use one of Microsoft&#39;s default project templates for .Net Core Web App, or get a head start by using the
<code>DisCatSharp.Hosting.ProjectTemplates</code> pack which contains a Bot Template to jumpstart your development. If you do the latter, majority of this is done for you.</p>
</div>
<h1 id="botcs" sourcefile="articles/basics/web_app.md" sourcestartlinenumber="15" sourceendlinenumber="15">Bot.cs</h1>
<p sourcefile="articles/basics/web_app.md" sourcestartlinenumber="16" sourceendlinenumber="16">For the sake of example, create a new class called <code>Bot</code> which inherits from <code>DiscordHostedService</code>. You&#39;re welcome to replace <code>Bot</code> with whatever you want.</p>
<div class="NOTE" sourcefile="articles/basics/web_app.md" sourcestartlinenumber="18" sourceendlinenumber="18"><h5>Note</h5><p sourcefile="articles/basics/web_app.md" sourcestartlinenumber="19" sourceendlinenumber="20">If you want to host a variety of bots it is important to provide a custom name into the <code>base</code> constructor. This indicates the <code>Key</code> within <code>IConfiguration</code> that will be used for
configuring your bot.</p>
</div>
<h3 id="default" sourcefile="articles/basics/web_app.md" sourcestartlinenumber="22" sourceendlinenumber="22">Default</h3>
<p sourcefile="articles/basics/web_app.md" sourcestartlinenumber="23" sourceendlinenumber="23"><code>DisCatSharp</code> is the default key used when configuring the bot.</p>
<pre sourcefile="articles/basics/web_app.md" sourcestartlinenumber="25" sourceendlinenumber="35"><code class="lang-cs">public class Bot : DiscordHostedService
{
    public Bot(IConfiguration config,
            ILogger&lt;Bot&gt; logger,
            IServiceProvider provider,
            IHostApplicationLifetime appLifetime) : base(config, logger, provider, appLifetime)
    {
    }
}
</code></pre><h3 id="custom" sourcefile="articles/basics/web_app.md" sourcestartlinenumber="37" sourceendlinenumber="37">Custom</h3>
<p sourcefile="articles/basics/web_app.md" sourcestartlinenumber="39" sourceendlinenumber="39">For example’s sake the custom bot name is &quot;Bot&quot;, so replace it with whatever you want.</p>
<pre sourcefile="articles/basics/web_app.md" sourcestartlinenumber="41" sourceendlinenumber="51"><code class="lang-cs">public class Bot : DiscordHostedService
{
    public Bot(IConfiguration config,
            ILogger&lt;Bot&gt; logger,
            IServiceProvider provider,
            IHostApplicationLifetime appLifetime) : base(config, logger, provider, appLifetime, &quot;Bot&quot;)
    {
    }
}
</code></pre><h1 id="startupcs" sourcefile="articles/basics/web_app.md" sourcestartlinenumber="53" sourceendlinenumber="53">Startup.cs</h1>
<h3 id="discatsharphostingdependencyinjection" sourcefile="articles/basics/web_app.md" sourcestartlinenumber="55" sourceendlinenumber="55">DisCatSharp.Hosting.DependencyInjection</h3>
<p sourcefile="articles/basics/web_app.md" sourcestartlinenumber="56" sourceendlinenumber="57">By using the <code>DisCatSharp.Hosting.DependencyInjection</code> module, this 1 line is enough to get
your basic bot running...</p>
<pre sourcefile="articles/basics/web_app.md" sourcestartlinenumber="59" sourceendlinenumber="64"><code class="lang-cs">public void ConfigureServices(IServiceCollection services)
{
    services.AddDiscordHostedService&lt;Bot&gt;();
}
</code></pre><h3 id="manual-registration" sourcefile="articles/basics/web_app.md" sourcestartlinenumber="66" sourceendlinenumber="66">Manual Registration</h3>
<p sourcefile="articles/basics/web_app.md" sourcestartlinenumber="68" sourceendlinenumber="70">If you prefer another DI approach / the manual route -- the following two
lines are all you need! For example sake, this bot doesn&#39;t have anything fancy going on.
You&#39;re welcome to create your own interface which inherits from <code>IDiscordHostedService</code>.</p>
<pre sourcefile="articles/basics/web_app.md" sourcestartlinenumber="72" sourceendlinenumber="78"><code class="lang-cs">public void ConfigureServices(IServiceCollection services)
{
    services.AddSingleton&lt;IDiscordHostedService, Bot&gt;();
    services.AddHostedService(provider =&gt; provider.GetRequiredService&lt;IDiscordHostedService&gt;());
}
</code></pre><p sourcefile="articles/basics/web_app.md" sourcestartlinenumber="80" sourceendlinenumber="81">Singleton - we only want 1 instance of Bot to ever run during runtime. <br>
Then we take the registered singleton to run as a <code>HostedService</code>.</p>
<h1 id="how-to-reference" sourcefile="articles/basics/web_app.md" sourcestartlinenumber="83" sourceendlinenumber="83">How to reference</h1>
<p sourcefile="articles/basics/web_app.md" sourcestartlinenumber="84" sourceendlinenumber="84">Within a DI environment, whether it&#39;s via constructor or an <code>IServiceProvider</code></p>
<h3 id="if-explicitly-registered-as-bot" sourcefile="articles/basics/web_app.md" sourcestartlinenumber="86" sourceendlinenumber="86">If explicitly registered as <code>Bot</code></h3>
<p sourcefile="articles/basics/web_app.md" sourcestartlinenumber="87" sourceendlinenumber="87">You either put <code>Bot</code> as part of your constructor. Or from a provider you do</p>
<pre sourcefile="articles/basics/web_app.md" sourcestartlinenumber="88" sourceendlinenumber="90"><code class="lang-cs">Bot bot = provider.GetRequiredService&lt;Bot&gt;();
</code></pre><h3 id="interface--bot" sourcefile="articles/basics/web_app.md" sourcestartlinenumber="92" sourceendlinenumber="92">Interface + Bot</h3>
<p sourcefile="articles/basics/web_app.md" sourcestartlinenumber="93" sourceendlinenumber="93">This approach means you are mapping the Interface to your <code>Bot</code>. However, you might notice that</p>
<pre sourcefile="articles/basics/web_app.md" sourcestartlinenumber="94" sourceendlinenumber="96"><code class="lang-cs">Bot bot = provider.GetRequiredService&lt;Bot&gt;();
</code></pre><p sourcefile="articles/basics/web_app.md" sourcestartlinenumber="98" sourceendlinenumber="99">or via constructor - you will get an exception indicating that <code>Bot</code> has not been registered. Well... it&#39;s true. It&#39;s looking for a key within the collection that matches the type you asked for.
When you use the Interface/Implementation combination it behaves <strong>almost</strong> like a dictionary -- <code>Bot</code> is not a valid key in this scenario.</p>
<p sourcefile="articles/basics/web_app.md" sourcestartlinenumber="101" sourceendlinenumber="101">So to retrieve your <code>Bot</code> reference you have to use the interface.</p>
<pre sourcefile="articles/basics/web_app.md" sourcestartlinenumber="103" sourceendlinenumber="105"><code class="lang-cs">IBot bot = provider.GetRequiredService&lt;IBot&gt;();
</code></pre><p sourcefile="articles/basics/web_app.md" sourcestartlinenumber="107" sourceendlinenumber="108">If you go down this path of mapping interface to implementation you shouldn&#39;t be casting your interface to Bot, or whatever. You&#39;d be better off just using the explicitly registered type.
The reasoning behind this approach is to allow you to swap out the implementation type in <strong>ONE</strong> place, and <strong>NOT</strong> have to update any other code.</p>
<p sourcefile="articles/basics/web_app.md" sourcestartlinenumber="110" sourceendlinenumber="112">For instance, logging... there are SO many ways to do logging. You might be familiar with <a href="https://docs.microsoft.com/en-us/dotnet/api/microsoft.extensions.logging.ilogger" data-raw-source="[ILogger](https://docs.microsoft.com/en-us/dotnet/api/microsoft.extensions.logging.ilogger)" sourcefile="articles/basics/web_app.md" sourcestartlinenumber="110" sourceendlinenumber="110">ILogger</a>. So long as something implements this interface it doesn&#39;t matter. It could be Serilog,
or a custom logger you created, or another package from the internet. If later in a project you are dissatisfied with your custom-built logger (which inherits from <code>ILogger</code>) you could
easily swap it out with <code>Serilog</code> in one place. This makes swapping between packages extremely easy - a simple 1 to 2 line change compared to a project-wide impact.</p>
<h1 id="how-to-configure" sourcefile="articles/basics/web_app.md" sourcestartlinenumber="114" sourceendlinenumber="114">How to Configure</h1>
<p sourcefile="articles/basics/web_app.md" sourcestartlinenumber="115" sourceendlinenumber="115">You must provide a token in order for the bot to work.</p>
<p sourcefile="articles/basics/web_app.md" sourcestartlinenumber="117" sourceendlinenumber="117">Add the following to <code>appsettings.json</code></p>
<pre sourcefile="articles/basics/web_app.md" sourcestartlinenumber="118" sourceendlinenumber="126"><code class="lang-json">{
    &quot;DisCatSharp&quot;: {
        &quot;Discord&quot;: {
            &quot;Token&quot;: &quot;YOUR TOKEN HERE&quot;
        }
    }
}
</code></pre><h2 id="dependency-injection" sourcefile="articles/basics/web_app.md" sourcestartlinenumber="128" sourceendlinenumber="128">Dependency Injection</h2>
<p sourcefile="articles/basics/web_app.md" sourcestartlinenumber="129" sourceendlinenumber="130">The ServiceProvider where you register the <code>DiscordHostedService</code> is automatically copied to the DiscordClient.
Therefore, if you want to use any services in your <a class="xref" href="../beyond_basics/events.html" data-raw-source="[event handlers](xref:beyond_basics_events)" sourcefile="articles/basics/web_app.md" sourcestartlinenumber="130" sourceendlinenumber="130">event handlers</a>, you can simply register them before the <code>DiscordHostedService</code>:</p>
<pre sourcefile="articles/basics/web_app.md" sourcestartlinenumber="131" sourceendlinenumber="138"><code class="lang-cs">public void ConfigureServices(IServiceCollection services)
{
    services.AddSingleton&lt;YourService&gt;();

    services.AddDiscordHostedService&lt;Bot&gt;();
}
</code></pre><p sourcefile="articles/basics/web_app.md" sourcestartlinenumber="139" sourceendlinenumber="139">In this case, <code>YourService</code> will be available in all your Discord event handlers.</p>
<h2 id="initialization-errors-handling" sourcefile="articles/basics/web_app.md" sourcestartlinenumber="141" sourceendlinenumber="141">Initialization errors handling</h2>
<p sourcefile="articles/basics/web_app.md" sourcestartlinenumber="142" sourceendlinenumber="144">During the initialization of bots, various exceptions can be thrown. For example: invalid token.
By default, the exception will be displayed in the console, after which the application will shutdown.
You can handle exceptions by overriding method <code>OnInitializationError</code> in your <code>DiscordHostedService</code>.</p>
<pre sourcefile="articles/basics/web_app.md" sourcestartlinenumber="146" sourceendlinenumber="153"><code class="lang-cs">protected override void OnInitializationError(Exception ex)
{
    // your code here

    base.OnInitializationError(ex);
}
</code></pre><h2 id="extensions" sourcefile="articles/basics/web_app.md" sourcestartlinenumber="155" sourceendlinenumber="155">Extensions</h2>
<p sourcefile="articles/basics/web_app.md" sourcestartlinenumber="156" sourceendlinenumber="156">If you wish to add additional modules/extensions you can do so one of two ways.</p>
<ol sourcefile="articles/basics/web_app.md" sourcestartlinenumber="157" sourceendlinenumber="158">
<li sourcefile="articles/basics/web_app.md" sourcestartlinenumber="157" sourceendlinenumber="157">Use the full namespace name</li>
<li sourcefile="articles/basics/web_app.md" sourcestartlinenumber="158" sourceendlinenumber="158">Namespace without the <code>DisCatSharp</code> prefix - because we assume the extension starts with DisCatSharp.</li>
</ol>
<p sourcefile="articles/basics/web_app.md" sourcestartlinenumber="160" sourceendlinenumber="160">To add the extensions <code>Interactivity</code> and <code>CommandsNext</code>:</p>
<pre sourcefile="articles/basics/web_app.md" sourcestartlinenumber="161" sourceendlinenumber="182"><code class="lang-json">{
    &quot;DisCatSharp&quot;: {
        &quot;Using&quot;: [
            &quot;DisCatSharp.Interactivity&quot;,
            &quot;CommandsNext&quot;
        ],

        &quot;Discord&quot;: {
            &quot;Token&quot;: &quot;YOUR TOKEN HERE&quot;
        },

        &quot;Interactivity&quot;: {
            &quot;PollBehaviour&quot;: &quot;KeepEmojis&quot;
        },

        &quot;CommandsNext&quot;: {
            &quot;StringPrefixes&quot;: [ &quot;!&quot; ]
        }
    }
}
</code></pre><div class="NOTE" sourcefile="articles/basics/web_app.md" sourcestartlinenumber="184" sourceendlinenumber="184"><h5>Note</h5><p sourcefile="articles/basics/web_app.md" sourcestartlinenumber="185" sourceendlinenumber="187">To configure an extension, you simply add a section for it under <code>DisCatSharp</code> in <code>appsettings.json</code>. You only have
to include values you <strong>WISH TO OVERRIDE</strong>. There is no need to include all config options if you only need to change 1 value.
For more info on which values are available checkout the following classes:</p>
<ul sourcefile="articles/basics/web_app.md" sourcestartlinenumber="188" sourceendlinenumber="193">
<li sourcefile="articles/basics/web_app.md" sourcestartlinenumber="188" sourceendlinenumber="188"><code>ApplicationCommandsConfiguration</code></li>
<li sourcefile="articles/basics/web_app.md" sourcestartlinenumber="189" sourceendlinenumber="189"><code>CommandsNextConfiguration</code></li>
<li sourcefile="articles/basics/web_app.md" sourcestartlinenumber="190" sourceendlinenumber="190"><code>DiscordConfiguration</code></li>
<li sourcefile="articles/basics/web_app.md" sourcestartlinenumber="191" sourceendlinenumber="191"><code>InteractivityConfiguration</code></li>
<li sourcefile="articles/basics/web_app.md" sourcestartlinenumber="192" sourceendlinenumber="192"><code>LavalinkConfiguration</code></li>
<li sourcefile="articles/basics/web_app.md" sourcestartlinenumber="193" sourceendlinenumber="193"><code>VoiceNextConfiguration</code></li>
</ul>
<p sourcefile="articles/basics/web_app.md" sourcestartlinenumber="195" sourceendlinenumber="195">For more information, you can also see the <a href="https://github.com/Aiko-IT-Systems/DisCatSharp.Examples/tree/main/Hosting" data-raw-source="[example](https://github.com/Aiko-IT-Systems/DisCatSharp.Examples/tree/main/Hosting)" sourcefile="articles/basics/web_app.md" sourcestartlinenumber="195" sourceendlinenumber="195">example</a>.</p>
</div>
<h2 id="multiple-bots" sourcefile="articles/basics/web_app.md" sourcestartlinenumber="197" sourceendlinenumber="197">Multiple bots</h2>
<p sourcefile="articles/basics/web_app.md" sourcestartlinenumber="198" sourceendlinenumber="198">In case you need to use multiple bots in one application, you need to use different names for them in the <code>appsettings.json</code>:</p>
<pre sourcefile="articles/basics/web_app.md" sourcestartlinenumber="199" sourceendlinenumber="212"><code class="lang-json">{
    &quot;BotOne&quot;: {
        &quot;Discord&quot;: {
            &quot;Token&quot;: &quot;YOUR TOKEN HERE&quot;
        }
    },
    &quot;BotTwo&quot;: {
        &quot;Discord&quot;: {
            &quot;Token&quot;: &quot;YOUR TOKEN HERE&quot;
        }
    }
}
</code></pre><p sourcefile="articles/basics/web_app.md" sourcestartlinenumber="214" sourceendlinenumber="214">Next, you need to create a new <code>DiscordHostedService</code> for each of the bots.</p>
<pre sourcefile="articles/basics/web_app.md" sourcestartlinenumber="215" sourceendlinenumber="231"><code class="lang-cs">public class BotOne : DiscordHostedService
{
    public BotOne(IConfiguration config, ILogger&lt;DiscordHostedService&gt; logger, IServiceProvider provider,
        IHostApplicationLifetime appLifetime) : base(config, logger, provider, appLifetime, &quot;BotOne&quot;)
    {
    }
}

public class BotTwo : DiscordHostedService
{
    public BotTwo(IConfiguration config, ILogger&lt;DiscordHostedService&gt; logger, IServiceProvider provider,
        IHostApplicationLifetime appLifetime) : base(config, logger, provider, appLifetime, &quot;BotTwo&quot;)
    {
    }
}
</code></pre><p sourcefile="articles/basics/web_app.md" sourcestartlinenumber="233" sourceendlinenumber="233">Note: you must also specify the name of the bot in the constructor, which must match the one specified in the config.</p>
<p sourcefile="articles/basics/web_app.md" sourcestartlinenumber="235" sourceendlinenumber="235">Now, you can simply register them in the usual way:</p>
<pre sourcefile="articles/basics/web_app.md" sourcestartlinenumber="236" sourceendlinenumber="242"><code class="lang-cs">public void ConfigureServices(IServiceCollection services)
{
    services.AddDiscordHostedService&lt;BotOne&gt;();
    services.AddDiscordHostedService&lt;BotTwo&gt;();
}
</code></pre><hr>
<h2 id="values" sourcefile="articles/basics/web_app.md" sourcestartlinenumber="245" sourceendlinenumber="245">Values</h2>
<p sourcefile="articles/basics/web_app.md" sourcestartlinenumber="246" sourceendlinenumber="246">It&#39;s worth mentioning the required formats for certain value types</p>
<h3 id="enum" sourcefile="articles/basics/web_app.md" sourcestartlinenumber="248" sourceendlinenumber="248">Enum</h3>
<ul sourcefile="articles/basics/web_app.md" sourcestartlinenumber="249" sourceendlinenumber="252">
<li sourcefile="articles/basics/web_app.md" sourcestartlinenumber="249" sourceendlinenumber="250">Single Flag/Value<ul sourcefile="articles/basics/web_app.md" sourcestartlinenumber="250" sourceendlinenumber="250">
<li sourcefile="articles/basics/web_app.md" sourcestartlinenumber="250" sourceendlinenumber="250">&quot;<code>Value</code>&quot;</li>
</ul>
</li>
<li sourcefile="articles/basics/web_app.md" sourcestartlinenumber="251" sourceendlinenumber="252">Multiple Flags<ul sourcefile="articles/basics/web_app.md" sourcestartlinenumber="252" sourceendlinenumber="252">
<li sourcefile="articles/basics/web_app.md" sourcestartlinenumber="252" sourceendlinenumber="252">&quot;<code>Flag1|Flag2|Flag3</code>&quot;</li>
</ul>
</li>
</ul>
<h4 id="example" sourcefile="articles/basics/web_app.md" sourcestartlinenumber="254" sourceendlinenumber="254">Example</h4>
<pre sourcefile="articles/basics/web_app.md" sourcestartlinenumber="255" sourceendlinenumber="263"><code class="lang-json">{
    &quot;DisCatSharp&quot;: {
        &quot;Discord&quot;: {
            &quot;Intents&quot;: &quot;GuildMembers|GuildsBans&quot;
        }
    }
}
</code></pre><h3 id="timespan" sourcefile="articles/basics/web_app.md" sourcestartlinenumber="265" sourceendlinenumber="265">TimeSpan</h3>
<p sourcefile="articles/basics/web_app.md" sourcestartlinenumber="266" sourceendlinenumber="266">Hours:Minutes:Seconds &quot;<code>HH:mm:ss</code>&quot;</p>
<h4 id="example-1" sourcefile="articles/basics/web_app.md" sourcestartlinenumber="268" sourceendlinenumber="268">Example</h4>
<p sourcefile="articles/basics/web_app.md" sourcestartlinenumber="269" sourceendlinenumber="269">HttpTimeout of 5 minutes</p>
<pre sourcefile="articles/basics/web_app.md" sourcestartlinenumber="270" sourceendlinenumber="278"><code class="lang-json">{
    &quot;DisCatSharp&quot;: {
        &quot;Discord&quot;: {
            &quot;HttpTimeout&quot;: &quot;00:05:00&quot;
        }
    }
}
</code></pre></article>
                </div>

                <div class="copyright-footer">
                    <span>&#169; Aiko IT Systems. All rights reserved.</span>
                </div>
            </div></main>
        

        
        <script src="https://code.jquery.com/jquery-3.5.1.min.js" integrity="sha256-9/aliU8dGd2tb6OSsuzixeV4y/faTqgFtohetphbbj0=" crossorigin="anonymous"></script>
        <script type="text/javascript" src="../../src/scripts/docfx.vendor.js"></script>
        <script type="text/javascript" src="../../src/scripts/docfx.js"></script>
        <script type="text/javascript" src="../../src/scripts/url.min.js"></script>
        <script type="text/javascript" src="../../src/scripts/highlight/highlight.min.js"></script>
        <script>hljs.highlightAll();</script>
        <script src="https://cdn.jsdelivr.net/npm/anchor-js/anchor.min.js"></script>
        <script type="text/javascript" src="../../src/scripts/jquery.twbsPagination.js"></script>
        <script type="text/javascript" src="../../src/scripts/dcs.js"></script>
        <script type="text/javascript" src="../../src/scripts/lunr.js"></script>
    </div></body>
</html>
