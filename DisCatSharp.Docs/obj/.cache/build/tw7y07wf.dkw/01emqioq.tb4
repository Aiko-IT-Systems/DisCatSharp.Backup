<!DOCTYPE html>
<!--[if IE]><![endif]-->
<html>
    
    <head>
      <meta charset="utf-8">
      <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
      <title>Application Commands Options  | DisCatSharp Docs </title>
      <meta name="viewport" content="width=device-width, initial-scale=1, user-scalable=no">
      <meta name="title" content="Application Commands Options  | DisCatSharp Docs ">
      <meta name="og:title" content="Application Commands Options  | DisCatSharp Docs ">
      <meta name="generator" content="docfx 2.60.1.0">
      
    <meta name="og:type" content="website">
    <meta name="og:image" content="https://cdn.aitsys.dev/file/data/kmjpa6f64me66dsm7dz3/PHID-FILE-degpfzd7nbw2q5yko5j7/logobig.png">
    <meta name="og:image:alt" content="DisCatSharp Logo">
    <meta name="og:image:type" content="image/png">
    <meta name="og:site_name" content="DisCatSharp Documentation">
    <link rel="apple-touch-icon" sizes="57x57" href="../../../apple-icon-57x57.png">
    <link rel="apple-touch-icon" sizes="60x60" href="../../../apple-icon-60x60.png">
    <link rel="apple-touch-icon" sizes="72x72" href="../../../apple-icon-72x72.png">
    <link rel="apple-touch-icon" sizes="76x76" href="../../../apple-icon-76x76.png">
    <link rel="apple-touch-icon" sizes="114x114" href="../../../apple-icon-114x114.png">
    <link rel="apple-touch-icon" sizes="120x120" href="../../../apple-icon-120x120.png">
    <link rel="apple-touch-icon" sizes="144x144" href="../../../apple-icon-144x144.png">
    <link rel="apple-touch-icon" sizes="152x152" href="../../../apple-icon-152x152.png">
    <link rel="apple-touch-icon" sizes="180x180" href="../../../apple-icon-180x180.png">
    <link rel="icon" type="image/png" sizes="192x192" href="../../../android-icon-192x192.png">
    <link rel="icon" type="image/png" sizes="32x32" href="../../../favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="96x96" href="../../../favicon-96x96.png">
    <link rel="icon" type="image/png" sizes="16x16" href="../../../favicon-16x16.png">
    <link rel="manifest" href="/manifest.json">
    <meta name="msapplication-TileColor" content="#ffffff">
    <meta name="msapplication-TileImage" content="../../../ms-icon-144x144.png">
    <meta name="theme-color" content="#ffffff">
      <link rel="shortcut icon" href="../../../favicon.ico">
      <script defer="" src='https://static.cloudflareinsights.com/beacon.min.js' data-cf-beacon='{"token": "de6c22ce0b3e4c17bb78c8c31b4e695b"}'></script>
      <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap" rel="stylesheet">
      <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/night-owl.min.css">
      <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.7.2/font/bootstrap-icons.css" integrity="sha384-EvBWSlnoFgZlXJvpzS+MAUEjvN7+gcCwH+qh7GRFOGgZO0PuwOFro7qPOJnLfe7l" crossorigin="anonymous">
      <link rel="stylesheet" href="../../../src/styles/config.css">
      <link rel="stylesheet" href="../../../src/styles/discord.css">
      <link rel="stylesheet" href="../../../src/styles/dcs.css">
      <link rel="stylesheet" href="../../../src/styles/main.css">
      <link rel="stylesheet" href="../../../src/styles/colors.css">
      <link rel="stylesheet" href="../../../src/styles/highlight/github-dark.min.css">
      <meta property="docfx:navrel" content="../../../toc.html">
      <meta property="docfx:tocrel" content="../../toc.html">
      
      <meta property="docfx:rel" content="../../../">
      <meta property="docfx:newtab" content="true">
    </head>

    <body>
        <div class="top-navbar">
            <a class="burger-icon" onclick="toggleMenu()">
                <svg name="Hamburger" style="vertical-align: middle;" width="34" height="34" viewbox="0 0 24 24"><path fill="currentColor" fill-rule="evenodd" clip-rule="evenodd" d="M20 6H4V9H20V6ZM4 10.999H20V13.999H4V10.999ZM4 15.999H20V18.999H4V15.999Z"></path></svg>
            </a>

            
            <a class="navbar-brand" href="../../../index.html">
              <img id="logo" class="svg" src="../../../logo.png" alt="DisCatSharp">
            </a>
        </div>

        <div class="body-content">
            <div id="blackout" class="blackout" onclick="toggleMenu()"></div>

            <nav id="sidebar" role="navigation">
                <div class="sidebar">
                    
                    <div>
                      <div class="mobile-hide">
                        
                        <a class="navbar-brand" href="../../../index.html">
                          <img id="logo" class="svg" src="../../../logo.png" alt="DisCatSharp">
                        </a>
                      </div>

                      <div class="sidesearch">
                        <form id="search" role="search" class="search">
                            <i class="bi bi-search search-icon"></i>
                            <input type="text" id="search-query" placeholder="Search" autocomplete="off">
                        </form>
                      </div>
                    
                      <div id="navbar">
                      </div>
                    </div>
                    <div class="sidebar-item-separator"></div>
                        
                        <div id="sidetoggle">
                          <div id="sidetoc"></div>
                        </div>
                </div>
                <div class="footer">
                  <strong>Made with â™¥ by AITSYS</strong>
                  
                </div>
            </nav>

            <main class="main-panel">
                
                <div id="search-results" style="display: none;">
                  <h1 class="search-list">Search Results for <span></span></h1>
                  <div class="sr-items">
                    <p class="lsearch"><i class="bi bi-hourglass-split index-loading"></i></p>
                  </div>
                  <ul id="pagination" data-first="First" data-prev="Previous" data-next="Next" data-last="Last"></ul>
                </div>

                <div role="main" class="hide-when-search">
                        
                        <div class="subnav navbar navbar-default">
                          <div class="container hide-when-search" id="breadcrumb">
                            <ul class="breadcrumb">
                              <li></li>
                            </ul>
                          </div>
                        </div>
						
						<div id="sidetoggle">
						  <div id="sidetoc"></div>
						</div>
						<div class="article row grid-right">

                    <article class="content wrap" id="_content" data-uid="modules_application_commands_options">
<h1 id="slash-commands-options" sourcefile="articles/modules/application_commands/options.md" sourcestartlinenumber="6" sourceendlinenumber="6">Slash Commands options</h1>

<p sourcefile="articles/modules/application_commands/options.md" sourcestartlinenumber="7" sourceendlinenumber="7">For slash commands, you can create options. They allow users to submit additional information to commands.</p>
<p sourcefile="articles/modules/application_commands/options.md" sourcestartlinenumber="9" sourceendlinenumber="9">Command options can be of the following types:</p>
<ul sourcefile="articles/modules/application_commands/options.md" sourcestartlinenumber="10" sourceendlinenumber="20">
<li sourcefile="articles/modules/application_commands/options.md" sourcestartlinenumber="10" sourceendlinenumber="10">string</li>
<li sourcefile="articles/modules/application_commands/options.md" sourcestartlinenumber="11" sourceendlinenumber="11">int</li>
<li sourcefile="articles/modules/application_commands/options.md" sourcestartlinenumber="12" sourceendlinenumber="12">long</li>
<li sourcefile="articles/modules/application_commands/options.md" sourcestartlinenumber="13" sourceendlinenumber="13">double</li>
<li sourcefile="articles/modules/application_commands/options.md" sourcestartlinenumber="14" sourceendlinenumber="14">bool</li>
<li sourcefile="articles/modules/application_commands/options.md" sourcestartlinenumber="15" sourceendlinenumber="15"><a class="xref" href="../../../api/DisCatSharp/DisCatSharp.Entities.DiscordUser.html" data-raw-source="[DiscordUser](xref:DisCatSharp.Entities.DiscordUser)" sourcefile="articles/modules/application_commands/options.md" sourcestartlinenumber="15" sourceendlinenumber="15">DiscordUser</a></li>
<li sourcefile="articles/modules/application_commands/options.md" sourcestartlinenumber="16" sourceendlinenumber="16"><a class="xref" href="../../../api/DisCatSharp/DisCatSharp.Entities.DiscordRole.html" data-raw-source="[DiscordRole](xref:DisCatSharp.Entities.DiscordRole)" sourcefile="articles/modules/application_commands/options.md" sourcestartlinenumber="16" sourceendlinenumber="16">DiscordRole</a></li>
<li sourcefile="articles/modules/application_commands/options.md" sourcestartlinenumber="17" sourceendlinenumber="17"><a class="xref" href="../../../api/DisCatSharp/DisCatSharp.Entities.DiscordChannel.html" data-raw-source="[DiscordChannel](xref:DisCatSharp.Entities.DiscordChannel)" sourcefile="articles/modules/application_commands/options.md" sourcestartlinenumber="17" sourceendlinenumber="17">DiscordChannel</a></li>
<li sourcefile="articles/modules/application_commands/options.md" sourcestartlinenumber="18" sourceendlinenumber="18"><a class="xref" href="../../../api/DisCatSharp/DisCatSharp.Entities.DiscordAttachment.html" data-raw-source="[DiscordAttachment](xref:DisCatSharp.Entities.DiscordAttachment)" sourcefile="articles/modules/application_commands/options.md" sourcestartlinenumber="18" sourceendlinenumber="18">DiscordAttachment</a></li>
<li sourcefile="articles/modules/application_commands/options.md" sourcestartlinenumber="19" sourceendlinenumber="19">mentionable (ulong)</li>
<li sourcefile="articles/modules/application_commands/options.md" sourcestartlinenumber="20" sourceendlinenumber="20">Enum</li>
</ul>
<h2 id="basic-usage" sourcefile="articles/modules/application_commands/options.md" sourcestartlinenumber="22" sourceendlinenumber="22">Basic usage</h2>
<div class="NOTE" sourcefile="articles/modules/application_commands/options.md" sourcestartlinenumber="24" sourceendlinenumber="24"><h5>Note</h5><p sourcefile="articles/modules/application_commands/options.md" sourcestartlinenumber="25" sourceendlinenumber="25">Options can only be added in the slash commands. Context menus do not support this!</p>
</div>
<p sourcefile="articles/modules/application_commands/options.md" sourcestartlinenumber="27" sourceendlinenumber="28">All of options must contain the <a class="xref" href="../../../api/DisCatSharp.ApplicationCommands/DisCatSharp.ApplicationCommands.Attributes.OptionAttribute.html" data-raw-source="[Option](xref:DisCatSharp.ApplicationCommands.Attributes.OptionAttribute)" sourcefile="articles/modules/application_commands/options.md" sourcestartlinenumber="27" sourceendlinenumber="27">Option</a> attribute.
They should be after <a class="xref" href="../../../api/DisCatSharp.ApplicationCommands/DisCatSharp.ApplicationCommands.Context.InteractionContext.html" data-raw-source="[InteractionContext](xref:DisCatSharp.ApplicationCommands.Context.InteractionContext)" sourcefile="articles/modules/application_commands/options.md" sourcestartlinenumber="28" sourceendlinenumber="28">InteractionContext</a>.</p>
<pre sourcefile="articles/modules/application_commands/options.md" sourcestartlinenumber="30" sourceendlinenumber="42"><code class="lang-cs">public class MyCommand : ApplicationCommandsModule
{
    [SlashCommand(&quot;my_command&quot;, &quot;This is description of the command.&quot;)]
    public static async Task MySlashCommand(InteractionContext context, [Option(&quot;argument&quot;, &quot;This is description of the option.&quot;)] string firstParam)
    {
        await context.CreateResponseAsync(InteractionResponseType.ChannelMessageWithSource, new DiscordInteractionResponseBuilder()
        {
            Content = firstParam
        });
    }
}
</code></pre><h2 id="choices" sourcefile="articles/modules/application_commands/options.md" sourcestartlinenumber="44" sourceendlinenumber="44">Choices</h2>
<p sourcefile="articles/modules/application_commands/options.md" sourcestartlinenumber="45" sourceendlinenumber="46">Sometimes, we need to allow users to choose from several pre-created options.
We can of course add a string or long parameter and let users guess the options, but why when we can make things more convenient?</p>
<p sourcefile="articles/modules/application_commands/options.md" sourcestartlinenumber="48" sourceendlinenumber="48">We have 3 ways to make choices:</p>
<ul sourcefile="articles/modules/application_commands/options.md" sourcestartlinenumber="49" sourceendlinenumber="51">
<li sourcefile="articles/modules/application_commands/options.md" sourcestartlinenumber="49" sourceendlinenumber="49">Enums</li>
<li sourcefile="articles/modules/application_commands/options.md" sourcestartlinenumber="50" sourceendlinenumber="50"><a class="xref" href="../../../api/DisCatSharp.ApplicationCommands/DisCatSharp.ApplicationCommands.Attributes.ChoiceAttribute.html" data-raw-source="[Choice Attribute](xref:DisCatSharp.ApplicationCommands.Attributes.ChoiceAttribute)" sourcefile="articles/modules/application_commands/options.md" sourcestartlinenumber="50" sourceendlinenumber="50">Choice Attribute</a></li>
<li sourcefile="articles/modules/application_commands/options.md" sourcestartlinenumber="51" sourceendlinenumber="51"><a class="xref" href="../../../api/DisCatSharp.ApplicationCommands/DisCatSharp.ApplicationCommands.Attributes.IChoiceProvider.html" data-raw-source="[Choice Providers](xref:DisCatSharp.ApplicationCommands.Attributes.IChoiceProvider)" sourcefile="articles/modules/application_commands/options.md" sourcestartlinenumber="51" sourceendlinenumber="51">Choice Providers</a></li>
</ul>
<h3 id="enums" sourcefile="articles/modules/application_commands/options.md" sourcestartlinenumber="53" sourceendlinenumber="53">Enums</h3>
<p sourcefile="articles/modules/application_commands/options.md" sourcestartlinenumber="55" sourceendlinenumber="55">This is the easiest option. We just need to specify the required Enum as a command parameter.</p>
<pre sourcefile="articles/modules/application_commands/options.md" sourcestartlinenumber="57" sourceendlinenumber="72"><code class="lang-cs">public class MyCommand : ApplicationCommandsModule
{
    [SlashCommand(&quot;my_command&quot;, &quot;This is description of the command.&quot;)]
    public static async Task MySlashCommand(InteractionContext context, [Option(&quot;enum_param&quot;, &quot;Description&quot;)] MyEnum enumParameter)
    {

    }
}

public enum MyEnum
{
    FirstOption,
    SecondOption
}
</code></pre><p sourcefile="articles/modules/application_commands/options.md" sourcestartlinenumber="74" sourceendlinenumber="75">In this case, the user will be shown this as options: <code>FirstOption</code> and <code>SecondOption</code>.
Therefore, if you want to define different names for options without changing the Enum, you can add a special attribute:</p>
<pre sourcefile="articles/modules/application_commands/options.md" sourcestartlinenumber="76" sourceendlinenumber="84"><code class="lang-cs">public enum MyEnum
{
    [ChoiceName(&quot;First option&quot;)]
    FirstOption,
    [ChoiceName(&quot;Second option&quot;)]
    SecondOption
}
</code></pre><h3 id="choice-attribute" sourcefile="articles/modules/application_commands/options.md" sourcestartlinenumber="86" sourceendlinenumber="86">Choice Attribute</h3>
<p sourcefile="articles/modules/application_commands/options.md" sourcestartlinenumber="88" sourceendlinenumber="89">With this way, you can get rid of unnecessary conversions within the command.
To do this, you need to add one or more <a class="xref" href="../../../api/DisCatSharp.ApplicationCommands/DisCatSharp.ApplicationCommands.Attributes.ChoiceAttribute.html" data-raw-source="[Choice Attributes](xref:DisCatSharp.ApplicationCommands.Attributes.ChoiceAttribute)" sourcefile="articles/modules/application_commands/options.md" sourcestartlinenumber="89" sourceendlinenumber="89">Choice Attributes</a> before the <a class="xref" href="../../../api/DisCatSharp.ApplicationCommands/DisCatSharp.ApplicationCommands.Attributes.OptionAttribute.html" data-raw-source="[Option](xref:DisCatSharp.ApplicationCommands.Attributes.OptionAttribute)" sourcefile="articles/modules/application_commands/options.md" sourcestartlinenumber="89" sourceendlinenumber="89">Option</a> attribute</p>
<pre sourcefile="articles/modules/application_commands/options.md" sourcestartlinenumber="90" sourceendlinenumber="96"><code class="lang-cs">[SlashCommand(&quot;my_command&quot;, &quot;This is description of the command.&quot;)]
public static async Task MySlashCommand(InteractionContext context, [Choice(&quot;First option&quot;, 1)] [Choice(&quot;Second option&quot;, 2)] [Option(&quot;option&quot;, &quot;Description&quot;)] long firstParam)
{

}
</code></pre><p sourcefile="articles/modules/application_commands/options.md" sourcestartlinenumber="98" sourceendlinenumber="99">As the first parameter, <a class="xref" href="../../../api/DisCatSharp.ApplicationCommands/DisCatSharp.ApplicationCommands.Attributes.ChoiceAttribute.html" data-raw-source="[Choice](xref:DisCatSharp.ApplicationCommands.Attributes.ChoiceAttribute)" sourcefile="articles/modules/application_commands/options.md" sourcestartlinenumber="98" sourceendlinenumber="98">Choice</a> takes a name that will be visible to the user, and the second - a value that will be passed to the command.
You can also use strings.</p>
<h3 id="choice-provider" sourcefile="articles/modules/application_commands/options.md" sourcestartlinenumber="101" sourceendlinenumber="101">Choice Provider</h3>
<p sourcefile="articles/modules/application_commands/options.md" sourcestartlinenumber="103" sourceendlinenumber="104">Perhaps the most difficult way. It consists in writing a method that will generate a list of options when registering commands.
This way we don&#39;t have to list all of them in the code when there are many of them.</p>
<p sourcefile="articles/modules/application_commands/options.md" sourcestartlinenumber="106" sourceendlinenumber="106">To create your own provider, you need to create a class that inherits <a class="xref" href="../../../api/DisCatSharp.ApplicationCommands/DisCatSharp.ApplicationCommands.Attributes.IChoiceProvider.html" data-raw-source="[IChoiceProvider](xref:DisCatSharp.ApplicationCommands.Attributes.IChoiceProvider)" sourcefile="articles/modules/application_commands/options.md" sourcestartlinenumber="106" sourceendlinenumber="106">IChoiceProvider</a> and contains the <code>Provider()</code> method.</p>
<pre sourcefile="articles/modules/application_commands/options.md" sourcestartlinenumber="107" sourceendlinenumber="115"><code class="lang-cs">public class MyChoiceProvider : IChoiceProvider
{
    public Task&lt;IEnumerable&lt;DiscordApplicationCommandOptionChoice&gt;&gt; Provider()
    {

    }
}
</code></pre><p sourcefile="articles/modules/application_commands/options.md" sourcestartlinenumber="117" sourceendlinenumber="117">As seen above, the method should return a list of <a class="xref" href="../../../api/DisCatSharp/DisCatSharp.Entities.DiscordApplicationCommandOptionChoice.html" data-raw-source="[DiscordApplicationCommandOptionChoice](xref:DisCatSharp.Entities.DiscordApplicationCommandOptionChoice)" sourcefile="articles/modules/application_commands/options.md" sourcestartlinenumber="117" sourceendlinenumber="117">DiscordApplicationCommandOptionChoice</a>.</p>
<p sourcefile="articles/modules/application_commands/options.md" sourcestartlinenumber="119" sourceendlinenumber="119">Now we need to create a list and add items to it:</p>
<pre sourcefile="articles/modules/application_commands/options.md" sourcestartlinenumber="120" sourceendlinenumber="128"><code class="lang-cs">var options = new List&lt;DiscordApplicationCommandOptionChoice&gt;
{
    new DiscordApplicationCommandOptionChoice(&quot;First option&quot;, 1),
    new DiscordApplicationCommandOptionChoice(&quot;Second option&quot;, 2)
};

return Task.FromResult(options.AsEnumerable());
</code></pre><p sourcefile="articles/modules/application_commands/options.md" sourcestartlinenumber="130" sourceendlinenumber="130">Of course you can generate this list as you like. The main thing is that the method should return this list.</p>
<p sourcefile="articles/modules/application_commands/options.md" sourcestartlinenumber="132" sourceendlinenumber="132">Now let&#39;s add our new provider to the command.</p>
<pre sourcefile="articles/modules/application_commands/options.md" sourcestartlinenumber="135" sourceendlinenumber="141"><code class="lang-cs">[SlashCommand(&quot;my_command&quot;, &quot;This is description of the command.&quot;)]
public static async Task MySlashCommand(InteractionContext context, [ChoiceProvider(typeof(MyChoiceProvider))] [Option(&quot;option&quot;, &quot;Description&quot;)] long option)
{

}
</code></pre><p sourcefile="articles/modules/application_commands/options.md" sourcestartlinenumber="143" sourceendlinenumber="143">All the code that we got:</p>
<pre sourcefile="articles/modules/application_commands/options.md" sourcestartlinenumber="144" sourceendlinenumber="167"><code class="lang-cs">public class MyCommand : ApplicationCommandsModule
{
    [SlashCommand(&quot;my_command&quot;, &quot;This is description of the command.&quot;)]
    public static async Task MySlashCommand(InteractionContext context, [ChoiceProvider(typeof(MyChoiceProvider))] [Option(&quot;option&quot;, &quot;Description&quot;)] long option)
    {

    }
}

public class MyChoiceProvider : IChoiceProvider
{
    public Task&lt;IEnumerable&lt;DiscordApplicationCommandOptionChoice&gt;&gt; Provider()
    {
        var options = new List&lt;DiscordApplicationCommandOptionChoice&gt;
        {
            new DiscordApplicationCommandOptionChoice(&quot;First option&quot;, 1),
            new DiscordApplicationCommandOptionChoice(&quot;Second option&quot;, 2)
        };

        return Task.FromResult(options.AsEnumerable());
    }
}
</code></pre><p sourcefile="articles/modules/application_commands/options.md" sourcestartlinenumber="169" sourceendlinenumber="169">That&#39;s all, for a better example for <a class="xref" href="../../../api/DisCatSharp.ApplicationCommands/DisCatSharp.ApplicationCommands.Attributes.IChoiceProvider.html" data-raw-source="[ChoiceProvider](xref:DisCatSharp.ApplicationCommands.Attributes.IChoiceProvider)" sourcefile="articles/modules/application_commands/options.md" sourcestartlinenumber="169" sourceendlinenumber="169">ChoiceProvider</a> refer to the examples.</p>
<h2 id="autocomplete" sourcefile="articles/modules/application_commands/options.md" sourcestartlinenumber="171" sourceendlinenumber="171">Autocomplete</h2>
<p sourcefile="articles/modules/application_commands/options.md" sourcestartlinenumber="172" sourceendlinenumber="175">Autocomplete works in the same way as ChoiceProvider, with one difference:
the method that creates the list of choices is triggered not once when the commands are registered, but whenever the user types a command.
It is advisable to use this method exactly when you have a list that will be updated while the bot is running.
In other cases, when the choices will not change, it is advisable to use the previous methods.</p>
<p sourcefile="articles/modules/application_commands/options.md" sourcestartlinenumber="177" sourceendlinenumber="177">Creating an autocomplete is similar to creating a ChoiceProvider with a few changes:</p>
<pre sourcefile="articles/modules/application_commands/options.md" sourcestartlinenumber="178" sourceendlinenumber="192"><code class="lang-cs">public class MyAutocompleteProvider : IAutocompleteProvider
{
    public async Task&lt;IEnumerable&lt;DiscordApplicationCommandAutocompleteChoice&gt;&gt; Provider(AutocompleteContext ctx)
    {
        var options = new List&lt;DiscordApplicationCommandAutocompleteChoice&gt;
        {
            new DiscordApplicationCommandAutocompleteChoice(&quot;First option&quot;, 1),
            new DiscordApplicationCommandAutocompleteChoice(&quot;Second option&quot;, 2)
        };

        return Task.FromResult(options.AsEnumerable());
    }
}
</code></pre><p sourcefile="articles/modules/application_commands/options.md" sourcestartlinenumber="194" sourceendlinenumber="194">The changes are that instead of <a class="xref" href="../../../api/DisCatSharp.ApplicationCommands/DisCatSharp.ApplicationCommands.Attributes.IChoiceProvider.html" data-raw-source="[IChoiceProvider](xref:DisCatSharp.ApplicationCommands.Attributes.IChoiceProvider)" sourcefile="articles/modules/application_commands/options.md" sourcestartlinenumber="194" sourceendlinenumber="194">IChoiceProvider</a>, the class inherits <a class="xref" href="../../../api/DisCatSharp.ApplicationCommands/DisCatSharp.ApplicationCommands.Attributes.IAutocompleteProvider.html" data-raw-source="[IAutocompleteProvider](xref:DisCatSharp.ApplicationCommands.Attributes.IAutocompleteProvider)" sourcefile="articles/modules/application_commands/options.md" sourcestartlinenumber="194" sourceendlinenumber="194">IAutocompleteProvider</a>, and the Provider method should return a list with <a class="xref" href="../../../api/DisCatSharp/DisCatSharp.Entities.DiscordApplicationCommandAutocompleteChoice.html" data-raw-source="[DiscordApplicationCommandAutocompleteChoice](xref:DisCatSharp.Entities.DiscordApplicationCommandAutocompleteChoice)" sourcefile="articles/modules/application_commands/options.md" sourcestartlinenumber="194" sourceendlinenumber="194">DiscordApplicationCommandAutocompleteChoice</a>.</p>
<p sourcefile="articles/modules/application_commands/options.md" sourcestartlinenumber="196" sourceendlinenumber="196">Now we add it to the command:</p>
<pre sourcefile="articles/modules/application_commands/options.md" sourcestartlinenumber="197" sourceendlinenumber="203"><code class="lang-cs">[SlashCommand(&quot;my_command&quot;, &quot;This is description of the command.&quot;)]
public static async Task MySlashCommand(InteractionContext context, [Autocomplete(typeof(MyAutocompleteProvider))] [Option(&quot;option&quot;, &quot;Description&quot;, true)] long option)
{

}
</code></pre><p sourcefile="articles/modules/application_commands/options.md" sourcestartlinenumber="205" sourceendlinenumber="205">Note that we have not only replaced <a class="xref" href="../../../api/DisCatSharp.ApplicationCommands/DisCatSharp.ApplicationCommands.Attributes.ChoiceProviderAttribute.html" data-raw-source="[ChoiceProvider](xref:DisCatSharp.ApplicationCommands.Attributes.ChoiceProviderAttribute)" sourcefile="articles/modules/application_commands/options.md" sourcestartlinenumber="205" sourceendlinenumber="205">ChoiceProvider</a> with <a class="xref" href="../../../api/DisCatSharp.ApplicationCommands/DisCatSharp.ApplicationCommands.Attributes.AutocompleteAttribute.html" data-raw-source="[Autocomplete](xref:DisCatSharp.ApplicationCommands.Attributes.AutocompleteAttribute)" sourcefile="articles/modules/application_commands/options.md" sourcestartlinenumber="205" sourceendlinenumber="205">Autocomplete</a>, but also added <code>true</code> to <a class="xref" href="../../../api/DisCatSharp.ApplicationCommands/DisCatSharp.ApplicationCommands.Attributes.OptionAttribute.html" data-raw-source="[Option](xref:DisCatSharp.ApplicationCommands.Attributes.OptionAttribute)" sourcefile="articles/modules/application_commands/options.md" sourcestartlinenumber="205" sourceendlinenumber="205">Option</a>.</p>
<h2 id="channel-types" sourcefile="articles/modules/application_commands/options.md" sourcestartlinenumber="207" sourceendlinenumber="207">Channel types</h2>
<p sourcefile="articles/modules/application_commands/options.md" sourcestartlinenumber="209" sourceendlinenumber="209">Sometimes we may need to give users the ability to select only a certain type of channels, for example, only text, or voice channels.</p>
<p sourcefile="articles/modules/application_commands/options.md" sourcestartlinenumber="211" sourceendlinenumber="211">This can be done by adding the <a class="xref" href="../../../api/DisCatSharp.ApplicationCommands/DisCatSharp.ApplicationCommands.Attributes.ChannelTypesAttribute.html" data-raw-source="[ChannelTypes](xref:DisCatSharp.ApplicationCommands.Attributes.ChannelTypesAttribute)" sourcefile="articles/modules/application_commands/options.md" sourcestartlinenumber="211" sourceendlinenumber="211">ChannelTypes</a> attribute to the option with the <a class="xref" href="../../../api/DisCatSharp/DisCatSharp.Entities.DiscordChannel.html" data-raw-source="[DiscordChannel](xref:DisCatSharp.Entities.DiscordChannel)" sourcefile="articles/modules/application_commands/options.md" sourcestartlinenumber="211" sourceendlinenumber="211">DiscordChannel</a> type.</p>
<pre sourcefile="articles/modules/application_commands/options.md" sourcestartlinenumber="213" sourceendlinenumber="219"><code class="lang-cs">[SlashCommand(&quot;my_command&quot;, &quot;This is description of the command.&quot;)]
public static async Task MySlashCommand(InteractionContext context, [Option(&quot;channel&quot;, &quot;You can select only text channels.&quot;), ChannelTypes(ChannelType.Text)] DiscordChannel channel)
{

}
</code></pre><p sourcefile="articles/modules/application_commands/options.md" sourcestartlinenumber="221" sourceendlinenumber="221">This will make it possible to select only text channels.</p>
<h2 id="minimumvalue--maximumvalue-attribute" sourcefile="articles/modules/application_commands/options.md" sourcestartlinenumber="223" sourceendlinenumber="223">MinimumValue / MaximumValue Attribute</h2>
<p sourcefile="articles/modules/application_commands/options.md" sourcestartlinenumber="225" sourceendlinenumber="225">Sometimes we may need to give users the ability to select only a certain range of values.</p>
<p sourcefile="articles/modules/application_commands/options.md" sourcestartlinenumber="227" sourceendlinenumber="228">This can be done by adding the <a class="xref" href="../../../api/DisCatSharp.ApplicationCommands/DisCatSharp.ApplicationCommands.Attributes.MinimumValueAttribute.html" data-raw-source="[MinimumValue](xref:DisCatSharp.ApplicationCommands.Attributes.MinimumValueAttribute)" sourcefile="articles/modules/application_commands/options.md" sourcestartlinenumber="227" sourceendlinenumber="227">MinimumValue</a> and <a class="xref" href="../../../api/DisCatSharp.ApplicationCommands/DisCatSharp.ApplicationCommands.Attributes.MaximumValueAttribute.html" data-raw-source="[MaximumValue](xref:DisCatSharp.ApplicationCommands.Attributes.MaximumValueAttribute)" sourcefile="articles/modules/application_commands/options.md" sourcestartlinenumber="227" sourceendlinenumber="227">MaximumValue</a> attribute to the option.
It can be used only for the types <code>double</code>, <code>int</code> and <code>long</code> tho.</p>
<pre sourcefile="articles/modules/application_commands/options.md" sourcestartlinenumber="230" sourceendlinenumber="236"><code class="lang-cs">[SlashCommand(&quot;my_command&quot;, &quot;This is description of the command.&quot;)]
public static async Task MySlashCommand(InteractionContext context, [Option(&quot;number&quot;, &quot;You can select only a certain range.&quot;), MinimumValue(50), MaximumValue(100)] int numbers)
{

}
</code></pre><h2 id="minimumlength--maximumlength-attribute" sourcefile="articles/modules/application_commands/options.md" sourcestartlinenumber="238" sourceendlinenumber="238">MinimumLength / MaximumLength Attribute</h2>
<p sourcefile="articles/modules/application_commands/options.md" sourcestartlinenumber="240" sourceendlinenumber="240">Sometimes we may need to limit the user to a certain string length.</p>
<p sourcefile="articles/modules/application_commands/options.md" sourcestartlinenumber="242" sourceendlinenumber="243">This can be done by adding the <a class="xref" href="../../../api/DisCatSharp.ApplicationCommands/DisCatSharp.ApplicationCommands.Attributes.MinimumLengthAttribute.html" data-raw-source="[MinimumLength](xref:DisCatSharp.ApplicationCommands.Attributes.MinimumLengthAttribute)" sourcefile="articles/modules/application_commands/options.md" sourcestartlinenumber="242" sourceendlinenumber="242">MinimumLength</a> and <a class="xref" href="../../../api/DisCatSharp.ApplicationCommands/DisCatSharp.ApplicationCommands.Attributes.MaximumLengthAttribute.html" data-raw-source="[MaximumLength](xref:DisCatSharp.ApplicationCommands.Attributes.MaximumLengthAttribute)" sourcefile="articles/modules/application_commands/options.md" sourcestartlinenumber="242" sourceendlinenumber="242">MaximumLength</a> attribute to the option.
It can be used only for the type <code>string</code>.</p>
<pre sourcefile="articles/modules/application_commands/options.md" sourcestartlinenumber="245" sourceendlinenumber="251"><code class="lang-cs">[SlashCommand(&quot;my_command&quot;, &quot;This is description of the command.&quot;)]
public static async Task MySlashCommand(InteractionContext context, [Option(&quot;text&quot;, &quot;You can only send text with a length between 10 and 50 characters.&quot;), MinimumLength(10), MaximumLength(50)] string text)
{

}
</code></pre></article>
                </div>

                <div class="copyright-footer">
                    <span>&#169; Aiko IT Systems. All rights reserved.</span>
                </div>
            </div></main>
        

        
        <script src="https://code.jquery.com/jquery-3.5.1.min.js" integrity="sha256-9/aliU8dGd2tb6OSsuzixeV4y/faTqgFtohetphbbj0=" crossorigin="anonymous"></script>
        <script type="text/javascript" src="../../../src/scripts/docfx.vendor.js"></script>
        <script type="text/javascript" src="../../../src/scripts/docfx.js"></script>
        <script type="text/javascript" src="../../../src/scripts/url.min.js"></script>
        <script type="text/javascript" src="../../../src/scripts/highlight/highlight.min.js"></script>
        <script>hljs.highlightAll();</script>
        <script src="https://cdn.jsdelivr.net/npm/anchor-js/anchor.min.js"></script>
        <script type="text/javascript" src="../../../src/scripts/jquery.twbsPagination.js"></script>
        <script type="text/javascript" src="../../../src/scripts/dcs.js"></script>
        <script type="text/javascript" src="../../../src/scripts/lunr.js"></script>
    </div></body>
</html>
