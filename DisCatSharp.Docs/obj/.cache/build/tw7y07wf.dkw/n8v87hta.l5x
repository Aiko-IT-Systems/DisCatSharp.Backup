<!DOCTYPE html>
<!--[if IE]><![endif]-->
<html>
    
    <head>
      <meta charset="utf-8">
      <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
      <title>Custom Command Handler | DisCatSharp Docs </title>
      <meta name="viewport" content="width=device-width, initial-scale=1, user-scalable=no">
      <meta name="title" content="Custom Command Handler | DisCatSharp Docs ">
      <meta name="og:title" content="Custom Command Handler | DisCatSharp Docs ">
      <meta name="generator" content="docfx 2.60.1.0">
      
    <meta name="og:type" content="website">
    <meta name="og:image" content="https://cdn.aitsys.dev/file/data/kmjpa6f64me66dsm7dz3/PHID-FILE-degpfzd7nbw2q5yko5j7/logobig.png">
    <meta name="og:image:alt" content="DisCatSharp Logo">
    <meta name="og:image:type" content="image/png">
    <meta name="og:site_name" content="DisCatSharp Documentation">
    <link rel="apple-touch-icon" sizes="57x57" href="../../../apple-icon-57x57.png">
    <link rel="apple-touch-icon" sizes="60x60" href="../../../apple-icon-60x60.png">
    <link rel="apple-touch-icon" sizes="72x72" href="../../../apple-icon-72x72.png">
    <link rel="apple-touch-icon" sizes="76x76" href="../../../apple-icon-76x76.png">
    <link rel="apple-touch-icon" sizes="114x114" href="../../../apple-icon-114x114.png">
    <link rel="apple-touch-icon" sizes="120x120" href="../../../apple-icon-120x120.png">
    <link rel="apple-touch-icon" sizes="144x144" href="../../../apple-icon-144x144.png">
    <link rel="apple-touch-icon" sizes="152x152" href="../../../apple-icon-152x152.png">
    <link rel="apple-touch-icon" sizes="180x180" href="../../../apple-icon-180x180.png">
    <link rel="icon" type="image/png" sizes="192x192" href="../../../android-icon-192x192.png">
    <link rel="icon" type="image/png" sizes="32x32" href="../../../favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="96x96" href="../../../favicon-96x96.png">
    <link rel="icon" type="image/png" sizes="16x16" href="../../../favicon-16x16.png">
    <link rel="manifest" href="/manifest.json">
    <meta name="msapplication-TileColor" content="#ffffff">
    <meta name="msapplication-TileImage" content="../../../ms-icon-144x144.png">
    <meta name="theme-color" content="#ffffff">
      <link rel="shortcut icon" href="../../../favicon.ico">
      <script defer="" src='https://static.cloudflareinsights.com/beacon.min.js' data-cf-beacon='{"token": "de6c22ce0b3e4c17bb78c8c31b4e695b"}'></script>
      <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap" rel="stylesheet">
      <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/10.1.1/styles/night-owl.min.css">
      <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.7.2/font/bootstrap-icons.css" integrity="sha384-EvBWSlnoFgZlXJvpzS+MAUEjvN7+gcCwH+qh7GRFOGgZO0PuwOFro7qPOJnLfe7l" crossorigin="anonymous">
      <link rel="stylesheet" href="../../../src/styles/config.css">
      <link rel="stylesheet" href="../../../src/styles/discord.css">
      <link rel="stylesheet" href="../../../src/styles/dcs.css">
      <link rel="stylesheet" href="../../../src/styles/main.css">
      <link rel="stylesheet" href="../../../src/styles/colors.css">
      <link rel="stylesheet" href="../../../src/styles/highlight/github-dark.min.css">
      <meta property="docfx:navrel" content="../../../toc.html">
      <meta property="docfx:tocrel" content="../../toc.html">
      
      <meta property="docfx:rel" content="../../../">
      <meta property="docfx:newtab" content="true">
    </head>

    <body>
        <div class="top-navbar">
            <a class="burger-icon" onclick="toggleMenu()">
                <svg name="Hamburger" style="vertical-align: middle;" width="34" height="34" viewbox="0 0 24 24"><path fill="currentColor" fill-rule="evenodd" clip-rule="evenodd" d="M20 6H4V9H20V6ZM4 10.999H20V13.999H4V10.999ZM4 15.999H20V18.999H4V15.999Z"></path></svg>
            </a>

            
            <a class="navbar-brand" href="../../../index.html">
              <img id="logo" class="svg" src="../../../logo.png" alt="DisCatSharp">
            </a>
        </div>

        <div class="body-content">
            <div id="blackout" class="blackout" onclick="toggleMenu()"></div>

            <nav id="sidebar" role="navigation">
                <div class="sidebar">
                    
                    <div>
                      <div class="mobile-hide">
                        
                        <a class="navbar-brand" href="../../../index.html">
                          <img id="logo" class="svg" src="../../../logo.png" alt="DisCatSharp">
                        </a>
                      </div>

                      <div class="sidesearch">
                        <form id="search" role="search" class="search">
                            <i class="bi bi-search search-icon"></i>
                            <input type="text" id="search-query" placeholder="Search" autocomplete="off">
                        </form>
                      </div>
                    
                      <div id="navbar">
                      </div>
                    </div>
                    <div class="sidebar-item-separator"></div>
                        
                        <div id="sidetoggle">
                          <div id="sidetoc"></div>
                        </div>
                </div>
                <div class="footer">
                  <strong>Made with â™¥ by AITSYS</strong>
                  
                </div>
            </nav>

            <main class="main-panel">
                
                <div id="search-results" style="display: none;">
                  <h1 class="search-list">Search Results for <span></span></h1>
                  <div class="sr-items">
                    <p class="lsearch"><i class="bi bi-hourglass-split index-loading"></i></p>
                  </div>
                  <ul id="pagination" data-first="First" data-prev="Previous" data-next="Next" data-last="Last"></ul>
                </div>

                <div role="main" class="hide-when-search">
                        
                        <div class="subnav navbar navbar-default">
                          <div class="container hide-when-search" id="breadcrumb">
                            <ul class="breadcrumb">
                              <li></li>
                            </ul>
                          </div>
                        </div>
						
						<div id="sidetoggle">
						  <div id="sidetoc"></div>
						</div>
						<div class="article row grid-right">

                    <article class="content wrap" id="_content" data-uid="modules_commandsnext_command_handler">
<h2 id="custom-command-handler" sourcefile="articles/modules/commandsnext/command_handler.md" sourcestartlinenumber="6" sourceendlinenumber="6">Custom Command Handler</h2>

<div class="IMPORTANT" sourcefile="articles/modules/commandsnext/command_handler.md" sourcestartlinenumber="7" sourceendlinenumber="7"><h5>Important</h5><p sourcefile="articles/modules/commandsnext/command_handler.md" sourcestartlinenumber="8" sourceendlinenumber="9">Writing your own handler logic should only be done if <em>you know what you&#39;re doing</em>.<br>
You will be responsible for command execution and preventing deadlocks.</p>
</div>
<h3 id="disable-default-handler" sourcefile="articles/modules/commandsnext/command_handler.md" sourcestartlinenumber="11" sourceendlinenumber="11">Disable Default Handler</h3>
<p sourcefile="articles/modules/commandsnext/command_handler.md" sourcestartlinenumber="12" sourceendlinenumber="13">To begin, we&#39;ll need to disable the default command handler provided by CommandsNext.<br>
This is done by setting the <code>UseDefaultCommandHandler</code> configuration property to <code>false</code>.</p>
<pre sourcefile="articles/modules/commandsnext/command_handler.md" sourcestartlinenumber="14" sourceendlinenumber="20"><code class="lang-cs">var discord = new DiscordClient();
var commands = discord.UseCommandsNext(new CommandsNextConfiguration()
{
    UseDefaultCommandHandler = false
});
</code></pre><h3 id="create-event-handler" sourcefile="articles/modules/commandsnext/command_handler.md" sourcestartlinenumber="22" sourceendlinenumber="22">Create Event Handler</h3>
<p sourcefile="articles/modules/commandsnext/command_handler.md" sourcestartlinenumber="23" sourceendlinenumber="23">We&#39;ll then write a new handler for the <code>MessageCreated</code> event fired from <code>DiscordClient</code>.</p>
<pre sourcefile="articles/modules/commandsnext/command_handler.md" sourcestartlinenumber="24" sourceendlinenumber="33"><code class="lang-cs">discord.MessageCreated += CommandHandler;

// ...

private Task CommandHandler(DiscordClient client, MessageCreateEventArgs e)
{
    // See below ...
}
</code></pre><p sourcefile="articles/modules/commandsnext/command_handler.md" sourcestartlinenumber="34" sourceendlinenumber="34">This event handler will be our command handler, and you&#39;ll need to write the logic for it.</p>
<h3 id="handle-commands" sourcefile="articles/modules/commandsnext/command_handler.md" sourcestartlinenumber="36" sourceendlinenumber="36">Handle Commands</h3>
<p sourcefile="articles/modules/commandsnext/command_handler.md" sourcestartlinenumber="37" sourceendlinenumber="37">Start by parsing the message content for a prefix and command string</p>
<pre sourcefile="articles/modules/commandsnext/command_handler.md" sourcestartlinenumber="38" sourceendlinenumber="51"><code class="lang-cs">var cnext = client.GetCommandsNext();
var msg = e.Message;

// Check if message has valid prefix.
var cmdStart = msg.GetStringPrefixLength(&quot;!&quot;);
if (cmdStart == -1) return;

// Retrieve prefix.
var prefix = msg.Content.Substring(0, cmdStart);

// Retrieve full command string.
var cmdString = msg.Content.Substring(cmdStart);
</code></pre><p sourcefile="articles/modules/commandsnext/command_handler.md" sourcestartlinenumber="53" sourceendlinenumber="53">Then provide the command string to <code>CommandsNextExtension#FindCommand</code></p>
<pre sourcefile="articles/modules/commandsnext/command_handler.md" sourcestartlinenumber="54" sourceendlinenumber="56"><code class="lang-cs">var command = cnext.FindCommand(cmdString, out var args);
</code></pre><p sourcefile="articles/modules/commandsnext/command_handler.md" sourcestartlinenumber="58" sourceendlinenumber="58">Create a command context using our message and prefix, along with the command and its arguments</p>
<pre sourcefile="articles/modules/commandsnext/command_handler.md" sourcestartlinenumber="59" sourceendlinenumber="61"><code class="lang-cs">var ctx = cnext.CreateContext(msg, prefix, command, args);
</code></pre><p sourcefile="articles/modules/commandsnext/command_handler.md" sourcestartlinenumber="63" sourceendlinenumber="63">And pass the context to <code>CommandsNextExtension#ExecuteCommandAsync</code> to execute the command.</p>
<pre sourcefile="articles/modules/commandsnext/command_handler.md" sourcestartlinenumber="64" sourceendlinenumber="67"><code class="lang-cs">_ = Task.Run(async () =&gt; await cnext.ExecuteCommandAsync(ctx));
// Wrapped in Task.Run() to prevent deadlocks.
</code></pre><h3 id="finished-product" sourcefile="articles/modules/commandsnext/command_handler.md" sourcestartlinenumber="70" sourceendlinenumber="70">Finished Product</h3>
<p sourcefile="articles/modules/commandsnext/command_handler.md" sourcestartlinenumber="71" sourceendlinenumber="71">Altogether, your implementation should function similarly to the following:</p>
<pre sourcefile="articles/modules/commandsnext/command_handler.md" sourcestartlinenumber="72" sourceendlinenumber="92"><code class="lang-cs">private Task CommandHandler(DiscordClient client, MessageCreateEventArgs e)
{
    var cnext = client.GetCommandsNext();
    var msg = e.Message;

    var cmdStart = msg.GetStringPrefixLength(&quot;!&quot;);
    if (cmdStart == -1) return Task.CompletedTask;

    var prefix = msg.Content.Substring(0, cmdStart);
    var cmdString = msg.Content.Substring(cmdStart);

    var command = cnext.FindCommand(cmdString, out var args);
    if (command == null) return Task.CompletedTask;

    var ctx = cnext.CreateContext(msg, prefix, command, args);
    Task.Run(async () =&gt; await cnext.ExecuteCommandAsync(ctx));

    return Task.CompletedTask;
}
</code></pre></article>
                </div>

                <div class="copyright-footer">
                    <span>&#169; Aiko IT Systems. All rights reserved.</span>
                </div>
            </div></main>
        

        
        <script src="https://code.jquery.com/jquery-3.5.1.min.js" integrity="sha256-9/aliU8dGd2tb6OSsuzixeV4y/faTqgFtohetphbbj0=" crossorigin="anonymous"></script>
        <script type="text/javascript" src="../../../src/scripts/docfx.vendor.js"></script>
        <script type="text/javascript" src="../../../src/scripts/docfx.js"></script>
        <script type="text/javascript" src="../../../src/scripts/url.min.js"></script>
        <script type="text/javascript" src="../../../src/scripts/highlight/highlight.min.js"></script>
        <script>hljs.highlightAll();</script>
        <script src="https://cdn.jsdelivr.net/npm/anchor-js/anchor.min.js"></script>
        <script type="text/javascript" src="../../../src/scripts/jquery.twbsPagination.js"></script>
        <script type="text/javascript" src="../../../src/scripts/dcs.js"></script>
        <script type="text/javascript" src="../../../src/scripts/lunr.js"></script>
    </div></body>
</html>
