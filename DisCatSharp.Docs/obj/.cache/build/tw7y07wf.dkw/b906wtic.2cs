<!DOCTYPE html>
<!--[if IE]><![endif]-->
<html>
    
    <head>
      <meta charset="utf-8">
      <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
      <title>Bot as Hosted Service | DisCatSharp Docs </title>
      <meta name="viewport" content="width=device-width, initial-scale=1, user-scalable=no">
      <meta name="title" content="Bot as Hosted Service | DisCatSharp Docs ">
      <meta name="og:title" content="Bot as Hosted Service | DisCatSharp Docs ">
      <meta name="generator" content="docfx 2.60.1.0">
      
    <meta name="og:type" content="website">
    <meta name="og:image" content="https://cdn.aitsys.dev/file/data/kmjpa6f64me66dsm7dz3/PHID-FILE-degpfzd7nbw2q5yko5j7/logobig.png">
    <meta name="og:image:alt" content="DisCatSharp Logo">
    <meta name="og:image:type" content="image/png">
    <meta name="og:site_name" content="DisCatSharp Documentation">
    <link rel="apple-touch-icon" sizes="57x57" href="../../apple-icon-57x57.png">
    <link rel="apple-touch-icon" sizes="60x60" href="../../apple-icon-60x60.png">
    <link rel="apple-touch-icon" sizes="72x72" href="../../apple-icon-72x72.png">
    <link rel="apple-touch-icon" sizes="76x76" href="../../apple-icon-76x76.png">
    <link rel="apple-touch-icon" sizes="114x114" href="../../apple-icon-114x114.png">
    <link rel="apple-touch-icon" sizes="120x120" href="../../apple-icon-120x120.png">
    <link rel="apple-touch-icon" sizes="144x144" href="../../apple-icon-144x144.png">
    <link rel="apple-touch-icon" sizes="152x152" href="../../apple-icon-152x152.png">
    <link rel="apple-touch-icon" sizes="180x180" href="../../apple-icon-180x180.png">
    <link rel="icon" type="image/png" sizes="192x192" href="../../android-icon-192x192.png">
    <link rel="icon" type="image/png" sizes="32x32" href="../../favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="96x96" href="../../favicon-96x96.png">
    <link rel="icon" type="image/png" sizes="16x16" href="../../favicon-16x16.png">
    <link rel="manifest" href="/manifest.json">
    <meta name="msapplication-TileColor" content="#ffffff">
    <meta name="msapplication-TileImage" content="../../ms-icon-144x144.png">
    <meta name="theme-color" content="#ffffff">
      <link rel="shortcut icon" href="../../favicon.ico">
      <script defer="" src='https://static.cloudflareinsights.com/beacon.min.js' data-cf-beacon='{"token": "de6c22ce0b3e4c17bb78c8c31b4e695b"}'></script>
      <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap" rel="stylesheet">
      <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/night-owl.min.css">
      <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.7.2/font/bootstrap-icons.css" integrity="sha384-EvBWSlnoFgZlXJvpzS+MAUEjvN7+gcCwH+qh7GRFOGgZO0PuwOFro7qPOJnLfe7l" crossorigin="anonymous">
      <link rel="stylesheet" href="../../src/styles/config.css">
      <link rel="stylesheet" href="../../src/styles/discord.css">
      <link rel="stylesheet" href="../../src/styles/dcs.css">
      <link rel="stylesheet" href="../../src/styles/main.css">
      <link rel="stylesheet" href="../../src/styles/colors.css">
      <link rel="stylesheet" href="../../src/styles/highlight/github-dark.min.css">
      <meta property="docfx:navrel" content="../../toc.html">
      <meta property="docfx:tocrel" content="../toc.html">
      
      <meta property="docfx:rel" content="../../">
      <meta property="docfx:newtab" content="true">
    </head>

    <body>
        <div class="top-navbar">
            <a class="burger-icon" onclick="toggleMenu()">
                <svg name="Hamburger" style="vertical-align: middle;" width="34" height="34" viewbox="0 0 24 24"><path fill="currentColor" fill-rule="evenodd" clip-rule="evenodd" d="M20 6H4V9H20V6ZM4 10.999H20V13.999H4V10.999ZM4 15.999H20V18.999H4V15.999Z"></path></svg>
            </a>

            
            <a class="navbar-brand" href="../../index.html">
              <img id="logo" class="svg" src="../../logo.png" alt="DisCatSharp">
            </a>
        </div>

        <div class="body-content">
            <div id="blackout" class="blackout" onclick="toggleMenu()"></div>

            <nav id="sidebar" role="navigation">
                <div class="sidebar">
                    
                    <div>
                      <div class="mobile-hide">
                        
                        <a class="navbar-brand" href="../../index.html">
                          <img id="logo" class="svg" src="../../logo.png" alt="DisCatSharp">
                        </a>
                      </div>

                      <div class="sidesearch">
                        <form id="search" role="search" class="search">
                            <i class="bi bi-search search-icon"></i>
                            <input type="text" id="search-query" placeholder="Search" autocomplete="off">
                        </form>
                      </div>
                    
                      <div id="navbar">
                      </div>
                    </div>
                    <div class="sidebar-item-separator"></div>
                        
                        <div id="sidetoggle">
                          <div id="sidetoc"></div>
                        </div>
                </div>
                <div class="footer">
                  <strong>Made with ♥ by AITSYS</strong>
                  
                </div>
            </nav>

            <main class="main-panel">
                
                <div id="search-results" style="display: none;">
                  <h1 class="search-list">Search Results for <span></span></h1>
                  <div class="sr-items">
                    <p class="lsearch"><i class="bi bi-hourglass-split index-loading"></i></p>
                  </div>
                  <ul id="pagination" data-first="First" data-prev="Previous" data-next="Next" data-last="Last"></ul>
                </div>

                <div role="main" class="hide-when-search">
                        
                        <div class="subnav navbar navbar-default">
                          <div class="container hide-when-search" id="breadcrumb">
                            <ul class="breadcrumb">
                              <li></li>
                            </ul>
                          </div>
                        </div>
						
						<div id="sidetoggle">
						  <div id="sidetoc"></div>
						</div>
						<div class="article row grid-right">

                    <article class="content wrap" id="_content" data-uid="basics_web_app">
<h1 id="prerequisites" sourcefile="articles/basics/web_app.md" sourcestartlinenumber="6">Prerequisites</h1>

<p sourcefile="articles/basics/web_app.md" sourcestartlinenumber="7">Install the following packages:</p>
<ul sourcefile="articles/basics/web_app.md" sourcestartlinenumber="8">
<li sourcefile="articles/basics/web_app.md" sourcestartlinenumber="8">DisCatSharp</li>
<li sourcefile="articles/basics/web_app.md" sourcestartlinenumber="9">DisCatSharp.Hosting</li>
</ul>
<div class="IMPORTANT" sourcefile="articles/basics/web_app.md" sourcestartlinenumber="11">
<h5>Important</h5>
<p sourcefile="articles/basics/web_app.md" sourcestartlinenumber="12">Please be aware that this approach relies on Dependency Injection. You can either use one of Microsoft's default project templates for .Net Core Web App, or get a head start by using the
<code sourcefile="articles/basics/web_app.md" sourcestartlinenumber="13">DisCatSharp.Hosting.ProjectTemplates</code> pack which contains a Bot Template to jumpstart your development. If you do the latter, majority of this is done for you.</p>
</div>
<h1 id="botcs" sourcefile="articles/basics/web_app.md" sourcestartlinenumber="15">Bot.cs</h1>
<p sourcefile="articles/basics/web_app.md" sourcestartlinenumber="16">For the sake of example, create a new class called <code sourcefile="articles/basics/web_app.md" sourcestartlinenumber="16">Bot</code> which inherits from <code sourcefile="articles/basics/web_app.md" sourcestartlinenumber="16">DiscordHostedService</code>. You're welcome to replace <code sourcefile="articles/basics/web_app.md" sourcestartlinenumber="16">Bot</code> with whatever you want.</p>
<div class="NOTE" sourcefile="articles/basics/web_app.md" sourcestartlinenumber="18">
<h5>Note</h5>
<p sourcefile="articles/basics/web_app.md" sourcestartlinenumber="19">If you want to host a variety of bots it is important to provide a custom name into the <code sourcefile="articles/basics/web_app.md" sourcestartlinenumber="19">base</code> constructor. This indicates the <code sourcefile="articles/basics/web_app.md" sourcestartlinenumber="19">Key</code> within <code sourcefile="articles/basics/web_app.md" sourcestartlinenumber="19">IConfiguration</code> that will be used for
configuring your bot.</p>
</div>
<h3 id="default" sourcefile="articles/basics/web_app.md" sourcestartlinenumber="22">Default</h3>
<p sourcefile="articles/basics/web_app.md" sourcestartlinenumber="23"><code sourcefile="articles/basics/web_app.md" sourcestartlinenumber="23">DisCatSharp</code> is the default key used when configuring the bot.</p>
<pre><code class="lang-cs" sourcefile="articles/basics/web_app.md" sourcestartlinenumber="25">public class Bot : DiscordHostedService
{
    public Bot(IConfiguration config,
            ILogger&lt;Bot&gt; logger,
            IServiceProvider provider,
            IHostApplicationLifetime appLifetime) : base(config, logger, provider, appLifetime)
    {
    }
}
</code></pre>
<h3 id="custom" sourcefile="articles/basics/web_app.md" sourcestartlinenumber="37">Custom</h3>
<p sourcefile="articles/basics/web_app.md" sourcestartlinenumber="39">For example’s sake the custom bot name is &quot;Bot&quot;, so replace it with whatever you want.</p>
<pre><code class="lang-cs" sourcefile="articles/basics/web_app.md" sourcestartlinenumber="41">public class Bot : DiscordHostedService
{
    public Bot(IConfiguration config,
            ILogger&lt;Bot&gt; logger,
            IServiceProvider provider,
            IHostApplicationLifetime appLifetime) : base(config, logger, provider, appLifetime, &quot;Bot&quot;)
    {
    }
}
</code></pre>
<h1 id="startupcs" sourcefile="articles/basics/web_app.md" sourcestartlinenumber="53">Startup.cs</h1>
<h3 id="discatsharphostingdependencyinjection" sourcefile="articles/basics/web_app.md" sourcestartlinenumber="55">DisCatSharp.Hosting.DependencyInjection</h3>
<p sourcefile="articles/basics/web_app.md" sourcestartlinenumber="56">By using the <code sourcefile="articles/basics/web_app.md" sourcestartlinenumber="56">DisCatSharp.Hosting.DependencyInjection</code> module, this 1 line is enough to get
your basic bot running...</p>
<pre><code class="lang-cs" sourcefile="articles/basics/web_app.md" sourcestartlinenumber="59">public void ConfigureServices(IServiceCollection services)
{
    services.AddDiscordHostedService&lt;Bot&gt;();
}
</code></pre>
<h3 id="manual-registration" sourcefile="articles/basics/web_app.md" sourcestartlinenumber="66">Manual Registration</h3>
<p sourcefile="articles/basics/web_app.md" sourcestartlinenumber="68">If you prefer another DI approach / the manual route -- the following two
lines are all you need! For example sake, this bot doesn't have anything fancy going on.
You're welcome to create your own interface which inherits from <code sourcefile="articles/basics/web_app.md" sourcestartlinenumber="70">IDiscordHostedService</code>.</p>
<pre><code class="lang-cs" sourcefile="articles/basics/web_app.md" sourcestartlinenumber="72">public void ConfigureServices(IServiceCollection services)
{
    services.AddSingleton&lt;IDiscordHostedService, Bot&gt;();
    services.AddHostedService(provider =&gt; provider.GetRequiredService&lt;IDiscordHostedService&gt;());
}
</code></pre>
<p sourcefile="articles/basics/web_app.md" sourcestartlinenumber="80">Singleton - we only want 1 instance of Bot to ever run during runtime. <br>
Then we take the registered singleton to run as a <code sourcefile="articles/basics/web_app.md" sourcestartlinenumber="81">HostedService</code>.</p>
<h1 id="how-to-reference" sourcefile="articles/basics/web_app.md" sourcestartlinenumber="83">How to reference</h1>
<p sourcefile="articles/basics/web_app.md" sourcestartlinenumber="84">Within a DI environment, whether it's via constructor or an <code sourcefile="articles/basics/web_app.md" sourcestartlinenumber="84">IServiceProvider</code></p>
<h3 id="if-explicitly-registered-as-bot" sourcefile="articles/basics/web_app.md" sourcestartlinenumber="86">If explicitly registered as <code sourcefile="articles/basics/web_app.md" sourcestartlinenumber="86">Bot</code></h3>
<p sourcefile="articles/basics/web_app.md" sourcestartlinenumber="87">You either put <code sourcefile="articles/basics/web_app.md" sourcestartlinenumber="87">Bot</code> as part of your constructor. Or from a provider you do</p>
<pre><code class="lang-cs" sourcefile="articles/basics/web_app.md" sourcestartlinenumber="88">Bot bot = provider.GetRequiredService&lt;Bot&gt;();
</code></pre>
<h3 id="interface--bot" sourcefile="articles/basics/web_app.md" sourcestartlinenumber="92">Interface + Bot</h3>
<p sourcefile="articles/basics/web_app.md" sourcestartlinenumber="93">This approach means you are mapping the Interface to your <code sourcefile="articles/basics/web_app.md" sourcestartlinenumber="93">Bot</code>. However, you might notice that</p>
<pre><code class="lang-cs" sourcefile="articles/basics/web_app.md" sourcestartlinenumber="94">Bot bot = provider.GetRequiredService&lt;Bot&gt;();
</code></pre>
<p sourcefile="articles/basics/web_app.md" sourcestartlinenumber="98">or via constructor - you will get an exception indicating that <code sourcefile="articles/basics/web_app.md" sourcestartlinenumber="98">Bot</code> has not been registered. Well... it's true. It's looking for a key within the collection that matches the type you asked for.
When you use the Interface/Implementation combination it behaves <strong sourcefile="articles/basics/web_app.md" sourcestartlinenumber="99">almost</strong> like a dictionary -- <code sourcefile="articles/basics/web_app.md" sourcestartlinenumber="99">Bot</code> is not a valid key in this scenario.</p>
<p sourcefile="articles/basics/web_app.md" sourcestartlinenumber="101">So to retrieve your <code sourcefile="articles/basics/web_app.md" sourcestartlinenumber="101">Bot</code> reference you have to use the interface.</p>
<pre><code class="lang-cs" sourcefile="articles/basics/web_app.md" sourcestartlinenumber="103">IBot bot = provider.GetRequiredService&lt;IBot&gt;();
</code></pre>
<p sourcefile="articles/basics/web_app.md" sourcestartlinenumber="107">If you go down this path of mapping interface to implementation you shouldn't be casting your interface to Bot, or whatever. You'd be better off just using the explicitly registered type.
The reasoning behind this approach is to allow you to swap out the implementation type in <strong sourcefile="articles/basics/web_app.md" sourcestartlinenumber="108">ONE</strong> place, and <strong sourcefile="articles/basics/web_app.md" sourcestartlinenumber="108">NOT</strong> have to update any other code.</p>
<p sourcefile="articles/basics/web_app.md" sourcestartlinenumber="110">For instance, logging... there are SO many ways to do logging. You might be familiar with <a href="https://docs.microsoft.com/en-us/dotnet/api/microsoft.extensions.logging.ilogger" sourcefile="articles/basics/web_app.md" sourcestartlinenumber="110">ILogger</a>. So long as something implements this interface it doesn't matter. It could be Serilog,
or a custom logger you created, or another package from the internet. If later in a project you are dissatisfied with your custom-built logger (which inherits from <code sourcefile="articles/basics/web_app.md" sourcestartlinenumber="111">ILogger</code>) you could
easily swap it out with <code sourcefile="articles/basics/web_app.md" sourcestartlinenumber="112">Serilog</code> in one place. This makes swapping between packages extremely easy - a simple 1 to 2 line change compared to a project-wide impact.</p>
<h1 id="how-to-configure" sourcefile="articles/basics/web_app.md" sourcestartlinenumber="114">How to Configure</h1>
<p sourcefile="articles/basics/web_app.md" sourcestartlinenumber="115">You must provide a token in order for the bot to work.</p>
<p sourcefile="articles/basics/web_app.md" sourcestartlinenumber="117">Add the following to <code sourcefile="articles/basics/web_app.md" sourcestartlinenumber="117">appsettings.json</code></p>
<pre><code class="lang-json" sourcefile="articles/basics/web_app.md" sourcestartlinenumber="118">{
    &quot;DisCatSharp&quot;: {
        &quot;Discord&quot;: {
            &quot;Token&quot;: &quot;YOUR TOKEN HERE&quot;
        }
    }
}
</code></pre>
<h2 id="dependency-injection" sourcefile="articles/basics/web_app.md" sourcestartlinenumber="128">Dependency Injection</h2>
<p sourcefile="articles/basics/web_app.md" sourcestartlinenumber="129">The ServiceProvider where you register the <code sourcefile="articles/basics/web_app.md" sourcestartlinenumber="129">DiscordHostedService</code> is automatically copied to the DiscordClient.
Therefore, if you want to use any services in your <a class="xref" href="../beyond_basics/events.html" sourcefile="articles/basics/web_app.md" sourcestartlinenumber="130">event handlers</a>, you can simply register them before the <code sourcefile="articles/basics/web_app.md" sourcestartlinenumber="130">DiscordHostedService</code>:</p>
<pre><code class="lang-cs" sourcefile="articles/basics/web_app.md" sourcestartlinenumber="131">public void ConfigureServices(IServiceCollection services)
{
    services.AddSingleton&lt;YourService&gt;();

    services.AddDiscordHostedService&lt;Bot&gt;();
}
</code></pre>
<p sourcefile="articles/basics/web_app.md" sourcestartlinenumber="139">In this case, <code sourcefile="articles/basics/web_app.md" sourcestartlinenumber="139">YourService</code> will be available in all your Discord event handlers.</p>
<h2 id="initialization-errors-handling" sourcefile="articles/basics/web_app.md" sourcestartlinenumber="141">Initialization errors handling</h2>
<p sourcefile="articles/basics/web_app.md" sourcestartlinenumber="142">During the initialization of bots, various exceptions can be thrown. For example: invalid token.
By default, the exception will be displayed in the console, after which the application will shutdown.
You can handle exceptions by overriding method <code sourcefile="articles/basics/web_app.md" sourcestartlinenumber="144">OnInitializationError</code> in your <code sourcefile="articles/basics/web_app.md" sourcestartlinenumber="144">DiscordHostedService</code>.</p>
<pre><code class="lang-cs" sourcefile="articles/basics/web_app.md" sourcestartlinenumber="146">protected override void OnInitializationError(Exception ex)
{
    // your code here

    base.OnInitializationError(ex);
}
</code></pre>
<h2 id="extensions" sourcefile="articles/basics/web_app.md" sourcestartlinenumber="155">Extensions</h2>
<p sourcefile="articles/basics/web_app.md" sourcestartlinenumber="156">If you wish to add additional modules/extensions you can do so one of two ways.</p>
<ol sourcefile="articles/basics/web_app.md" sourcestartlinenumber="157">
<li sourcefile="articles/basics/web_app.md" sourcestartlinenumber="157">Use the full namespace name</li>
<li sourcefile="articles/basics/web_app.md" sourcestartlinenumber="158">Namespace without the <code sourcefile="articles/basics/web_app.md" sourcestartlinenumber="158">DisCatSharp</code> prefix - because we assume the extension starts with DisCatSharp.</li>
</ol>
<p sourcefile="articles/basics/web_app.md" sourcestartlinenumber="160">To add the extensions <code sourcefile="articles/basics/web_app.md" sourcestartlinenumber="160">Interactivity</code> and <code sourcefile="articles/basics/web_app.md" sourcestartlinenumber="160">CommandsNext</code>:</p>
<pre><code class="lang-json" sourcefile="articles/basics/web_app.md" sourcestartlinenumber="161">{
    &quot;DisCatSharp&quot;: {
        &quot;Using&quot;: [
            &quot;DisCatSharp.Interactivity&quot;,
            &quot;CommandsNext&quot;
        ],

        &quot;Discord&quot;: {
            &quot;Token&quot;: &quot;YOUR TOKEN HERE&quot;
        },

        &quot;Interactivity&quot;: {
            &quot;PollBehaviour&quot;: &quot;KeepEmojis&quot;
        },

        &quot;CommandsNext&quot;: {
            &quot;StringPrefixes&quot;: [ &quot;!&quot; ]
        }
    }
}
</code></pre>
<div class="NOTE" sourcefile="articles/basics/web_app.md" sourcestartlinenumber="184">
<h5>Note</h5>
<p sourcefile="articles/basics/web_app.md" sourcestartlinenumber="185">To configure an extension, you simply add a section for it under <code sourcefile="articles/basics/web_app.md" sourcestartlinenumber="185">DisCatSharp</code> in <code sourcefile="articles/basics/web_app.md" sourcestartlinenumber="185">appsettings.json</code>. You only have
to include values you <strong sourcefile="articles/basics/web_app.md" sourcestartlinenumber="186">WISH TO OVERRIDE</strong>. There is no need to include all config options if you only need to change 1 value.
For more info on which values are available checkout the following classes:</p>
<ul sourcefile="articles/basics/web_app.md" sourcestartlinenumber="188">
<li sourcefile="articles/basics/web_app.md" sourcestartlinenumber="188"><code sourcefile="articles/basics/web_app.md" sourcestartlinenumber="188">ApplicationCommandsConfiguration</code></li>
<li sourcefile="articles/basics/web_app.md" sourcestartlinenumber="189"><code sourcefile="articles/basics/web_app.md" sourcestartlinenumber="189">CommandsNextConfiguration</code></li>
<li sourcefile="articles/basics/web_app.md" sourcestartlinenumber="190"><code sourcefile="articles/basics/web_app.md" sourcestartlinenumber="190">DiscordConfiguration</code></li>
<li sourcefile="articles/basics/web_app.md" sourcestartlinenumber="191"><code sourcefile="articles/basics/web_app.md" sourcestartlinenumber="191">InteractivityConfiguration</code></li>
<li sourcefile="articles/basics/web_app.md" sourcestartlinenumber="192"><code sourcefile="articles/basics/web_app.md" sourcestartlinenumber="192">LavalinkConfiguration</code></li>
<li sourcefile="articles/basics/web_app.md" sourcestartlinenumber="193"><code sourcefile="articles/basics/web_app.md" sourcestartlinenumber="193">VoiceNextConfiguration</code></li>
</ul>
<p sourcefile="articles/basics/web_app.md" sourcestartlinenumber="195">For more information, you can also see the <a href="https://github.com/Aiko-IT-Systems/DisCatSharp.Examples/tree/main/Hosting" sourcefile="articles/basics/web_app.md" sourcestartlinenumber="195">example</a>.</p>
</div>
<h2 id="multiple-bots" sourcefile="articles/basics/web_app.md" sourcestartlinenumber="197">Multiple bots</h2>
<p sourcefile="articles/basics/web_app.md" sourcestartlinenumber="198">In case you need to use multiple bots in one application, you need to use different names for them in the <code sourcefile="articles/basics/web_app.md" sourcestartlinenumber="198">appsettings.json</code>:</p>
<pre><code class="lang-json" sourcefile="articles/basics/web_app.md" sourcestartlinenumber="199">{
    &quot;BotOne&quot;: {
        &quot;Discord&quot;: {
            &quot;Token&quot;: &quot;YOUR TOKEN HERE&quot;
        }
    },
    &quot;BotTwo&quot;: {
        &quot;Discord&quot;: {
            &quot;Token&quot;: &quot;YOUR TOKEN HERE&quot;
        }
    }
}
</code></pre>
<p sourcefile="articles/basics/web_app.md" sourcestartlinenumber="214">Next, you need to create a new <code sourcefile="articles/basics/web_app.md" sourcestartlinenumber="214">DiscordHostedService</code> for each of the bots.</p>
<pre><code class="lang-cs" sourcefile="articles/basics/web_app.md" sourcestartlinenumber="215">public class BotOne : DiscordHostedService
{
    public BotOne(IConfiguration config, ILogger&lt;DiscordHostedService&gt; logger, IServiceProvider provider,
        IHostApplicationLifetime appLifetime) : base(config, logger, provider, appLifetime, &quot;BotOne&quot;)
    {
    }
}

public class BotTwo : DiscordHostedService
{
    public BotTwo(IConfiguration config, ILogger&lt;DiscordHostedService&gt; logger, IServiceProvider provider,
        IHostApplicationLifetime appLifetime) : base(config, logger, provider, appLifetime, &quot;BotTwo&quot;)
    {
    }
}
</code></pre>
<p sourcefile="articles/basics/web_app.md" sourcestartlinenumber="233">Note: you must also specify the name of the bot in the constructor, which must match the one specified in the config.</p>
<p sourcefile="articles/basics/web_app.md" sourcestartlinenumber="235">Now, you can simply register them in the usual way:</p>
<pre><code class="lang-cs" sourcefile="articles/basics/web_app.md" sourcestartlinenumber="236">public void ConfigureServices(IServiceCollection services)
{
    services.AddDiscordHostedService&lt;BotOne&gt;();
    services.AddDiscordHostedService&lt;BotTwo&gt;();
}
</code></pre>
<hr sourcefile="articles/basics/web_app.md" sourcestartlinenumber="244">
<h2 id="values" sourcefile="articles/basics/web_app.md" sourcestartlinenumber="245">Values</h2>
<p sourcefile="articles/basics/web_app.md" sourcestartlinenumber="246">It's worth mentioning the required formats for certain value types</p>
<h3 id="enum" sourcefile="articles/basics/web_app.md" sourcestartlinenumber="248">Enum</h3>
<ul sourcefile="articles/basics/web_app.md" sourcestartlinenumber="249">
<li sourcefile="articles/basics/web_app.md" sourcestartlinenumber="249">Single Flag/Value
<ul sourcefile="articles/basics/web_app.md" sourcestartlinenumber="250">
<li sourcefile="articles/basics/web_app.md" sourcestartlinenumber="250">&quot;<code sourcefile="articles/basics/web_app.md" sourcestartlinenumber="250">Value</code>&quot;</li>
</ul>
</li>
<li sourcefile="articles/basics/web_app.md" sourcestartlinenumber="251">Multiple Flags
<ul sourcefile="articles/basics/web_app.md" sourcestartlinenumber="252">
<li sourcefile="articles/basics/web_app.md" sourcestartlinenumber="252">&quot;<code sourcefile="articles/basics/web_app.md" sourcestartlinenumber="252">Flag1|Flag2|Flag3</code>&quot;</li>
</ul>
</li>
</ul>
<h4 id="example" sourcefile="articles/basics/web_app.md" sourcestartlinenumber="254">Example</h4>
<pre><code class="lang-json" sourcefile="articles/basics/web_app.md" sourcestartlinenumber="255">{
    &quot;DisCatSharp&quot;: {
        &quot;Discord&quot;: {
            &quot;Intents&quot;: &quot;GuildMembers|GuildsBans&quot;
        }
    }
}
</code></pre>
<h3 id="timespan" sourcefile="articles/basics/web_app.md" sourcestartlinenumber="265">TimeSpan</h3>
<p sourcefile="articles/basics/web_app.md" sourcestartlinenumber="266">Hours:Minutes:Seconds &quot;<code sourcefile="articles/basics/web_app.md" sourcestartlinenumber="266">HH:mm:ss</code>&quot;</p>
<h4 id="example-1" sourcefile="articles/basics/web_app.md" sourcestartlinenumber="268">Example</h4>
<p sourcefile="articles/basics/web_app.md" sourcestartlinenumber="269">HttpTimeout of 5 minutes</p>
<pre><code class="lang-json" sourcefile="articles/basics/web_app.md" sourcestartlinenumber="270">{
    &quot;DisCatSharp&quot;: {
        &quot;Discord&quot;: {
            &quot;HttpTimeout&quot;: &quot;00:05:00&quot;
        }
    }
}
</code></pre>
</article>
                </div>

                <div class="copyright-footer">
                    <span>&#169; Aiko IT Systems. All rights reserved.</span>
                </div>
            </div></main>
        

        
        <script src="https://code.jquery.com/jquery-3.5.1.min.js" integrity="sha256-9/aliU8dGd2tb6OSsuzixeV4y/faTqgFtohetphbbj0=" crossorigin="anonymous"></script>
        <script type="text/javascript" src="../../src/scripts/docfx.vendor.js"></script>
        <script type="text/javascript" src="../../src/scripts/docfx.js"></script>
        <script type="text/javascript" src="../../src/scripts/url.min.js"></script>
        <script type="text/javascript" src="../../src/scripts/highlight/highlight.min.js"></script>
        <script>hljs.highlightAll();</script>
        <script src="https://cdn.jsdelivr.net/npm/anchor-js/anchor.min.js"></script>
        <script type="text/javascript" src="../../src/scripts/jquery.twbsPagination.js"></script>
        <script type="text/javascript" src="../../src/scripts/dcs.js"></script>
        <script type="text/javascript" src="../../src/scripts/lunr.js"></script>
    </div></body>
</html>
